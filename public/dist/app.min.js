'use strict';

angular.module('app.controllers', []);
angular.module('app.directives', []);
angular.module('app.resources', []);
angular.module('app.services', []);
angular.module('app.filters', []);
angular.module('app.routes', []);
angular.module('app.views', []);
angular.module('app.auth', []);

angular.module('app', ['ngResource', 'ngSanitize', 'ui.router', 'ui.tinymce', 'satellizer', '19degrees.ngSweetAlert2', 'app.controllers', 'app.directives', 'app.resources', 'app.services', 'app.filters', 'app.routes', 'app.views', 'app.auth']);
'use strict';

angular.module('app.auth').config(["$authProvider", function ($authProvider) {
	$authProvider.loginUrl = '/api/auth';
}]).run(["$rootScope", "$q", "$state", "$auth", "$store", "$load", "$invalidate", "$location", "$title", "$pretend", function ($rootScope, $q, $state, $auth, $store, $load, $invalidate, $location, $title, $pretend) {
	$rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
		event.preventDefault();

		if (toState.data && toState.data.title) {
			$title(toState.data.title);
		}

		// if($store.user && $store.user.new_user && toState.url !== '/set_password') {
		// 	console.log('no!')
		// 	$location.path('/set_password')
		// 	return
		// }

		$rootScope.bodyClass = 'page-' + toState.name;

		var invalids = $invalidate.load();

		if (invalids.length) invalids.push($pretend.wait(1000));
		// invalids.push($pretend.wait(1000))

		$rootScope.loader = true;

		$q.all(invalids).then(function () {
			var conditions = toState.data && toState.data.conditions ? toState.data.conditions : [];

			var redirectTo = null;

			conditions.forEach(function (c) {
				if (c == 'auth') {
					if (!$auth.isAuthenticated()) {
						redirectTo = 'login';
					}
				}

				if (c == 'guest_only') {
					if ($auth.isAuthenticated()) {
						redirectTo = 'home';
					}
				}

				if (c == 'manager_only') {
					if (!$auth.isAuthenticated()) {
						redirectTo = 'login';
					} else {
						if ($auth.getPayload().admin !== 2) {
							redirectTo = 'home';
						}
					}
				}

				if (c == 'staff_only') {
					if (!$auth.isAuthenticated()) {
						redirectTo = 'login';
					} else {
						if (!$auth.getPayload().admin) {
							redirectTo = 'home';
						}
					}
				}

				if (c == 'student_only') {
					if (!$auth.isAuthenticated()) {
						redirectTo = 'login';
					} else {
						if ($auth.getPayload().admin) {
							redirectTo = 'home';
						}
					}
				}
			});

			if (redirectTo) {
				console.log('kicked to', redirectTo);

				$rootScope.loader = false;
				$location.path(redirectTo);
			}

			if (!redirectTo) {

				// https://github.com/angular-ui/ui-router/issues/1158
				$state.go(toState.name, toParams, { notify: false }).then(function () {
					$rootScope.loader = false;
					$rootScope.$broadcast('$stateChangeSuccess', toState, toParams, fromState, fromParams);
				});
			}
		});
	});
}]);
'use strict';

angular.module('app.routes').config(["$stateProvider", "$urlRouterProvider", "$locationProvider", function ($stateProvider, $urlRouterProvider, $locationProvider) {

	$locationProvider.hashPrefix('');
	$locationProvider.html5Mode(true);

	$urlRouterProvider.otherwise('/');

	var states = {

		// ------------------------------------------------------------
		// Home
		// ------------------------------------------------------------

		'home': {
			url: '/',
			templateUrl: 'pages/misc/home/home.html',
			controller: 'homeCtrl',
			data: {
				conditions: ['auth'],
				title: 'Home'
			}
		},

		'edit_profile': {
			url: '/home/edit-profile',
			templateUrl: 'pages/manage/users/edit/edit.html',
			controller: 'userEditCtrl',
			data: {
				conditions: ['auth'],
				title: 'Edit Profile',
				edit_profile: true
			}
		},

		'set_password': {
			url: '/set_password',
			templateUrl: 'pages/manage/users/password/password.html',
			controller: 'userPasswordCtrl',
			data: {
				conditions: ['auth'],
				title: 'Set Password'
			}
		},

		// ------------------------------------------------------------
		// Guest
		// ------------------------------------------------------------

		'login': {
			url: '/login',
			templateUrl: 'pages/misc/login/login.html',
			controller: 'loginCtrl',
			data: {
				conditions: ['guest_only'],
				title: 'Login'
			}
		},

		'logout': {
			url: '/logout',
			controller: ['$auth', '$location', '$store', '$http', function ($auth, $location, $store, $http) {
				$auth.logout().then(function () {
					console.log('$http', $http);
					$store.user = {};
					$store.resetBooking();
					$http.get('/api/logout');
					$location.path('login');
				});
			}]
		},

		'reset_password': {
			url: '/reset_password',
			templateUrl: 'pages/misc/reset/reset.html',
			controller: 'resetCtrl',
			data: {
				conditions: ['guest_only'],
				title: 'Reset Password'
			}
		},

		// ------------------------------------------------------------
		// Manager only
		// ------------------------------------------------------------

		'site_settings': {
			url: '/site-settings',
			templateUrl: 'pages/misc/site-settings/site-settings.html',
			controller: 'siteSettingsCtrl',
			data: {
				conditions: ['manager_only'],
				title: 'Site Settings'
			}
		},

		// ------------------------------------------------------------
		// Booking
		// ------------------------------------------------------------

		'make_booking': {
			url: '/book',
			templateUrl: 'pages/booking/make/make.html',
			controller: 'makeCtrl',
			data: {
				conditions: ['auth'],
				title: 'Book Equipment'
			}
		},

		'confirm_booking': {
			url: '/book/confirm',
			templateUrl: 'pages/booking/confirm/confirm.html',
			controller: 'confirmCtrl',
			data: {
				conditions: ['auth'],
				title: 'Confirm booking',
				crumb_parent: 'make_booking'
			}
		},

		'success_booking': {
			url: '/book/success',
			templateUrl: 'pages/booking/success/success.html',
			controller: 'successCtrl',
			data: {
				conditions: ['auth'],
				title: 'Booking Made'
			}
		},

		'manage_bookings': {
			url: '/bookings?user&group&after&before&closed&returned&booked&issued&overdue&limit&page',
			templateUrl: 'pages/booking/manage/manage.html',
			controller: 'bookingsManageCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				title: 'All Bookings'
			}
		},

		'view_booking': {
			url: '/booking/:id',
			templateUrl: 'pages/booking/view/view.html',
			controller: 'viewBookingCtrl',
			data: {
				conditions: ['auth'],
				title: 'View Booking',
				crumb_parent: 'manage_bookings'
			}
		},

		'issue_booking': {
			url: '/booking/:id/issue',
			templateUrl: 'pages/booking/issue/issue.html',
			controller: 'issueCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				title: 'Issue Equipment',
				crumb_parent: 'view_booking'
			}
		},

		'return_booking': {
			url: '/booking/:id/return',
			templateUrl: 'pages/booking/return/return.html',
			controller: 'returnCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				title: 'Return Equipment',
				crumb_parent: 'view_booking'
			}
		},

		'edit_booking': {
			url: '/booking/:id/edit',
			templateUrl: 'pages/booking/edit/edit.html',
			controller: 'editBookingCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				title: 'Edit Booking',
				crumb_parent: 'view_booking'
			}
		},

		// ------------------------------------------------------------
		// Manage
		// ------------------------------------------------------------

		'manage': {
			url: '/manage',
			templateUrl: 'pages/manage/manage/manage.html',
			controller: 'manageCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				title: 'Manage'
			}
		},

		// ------------------------------------------------------------
		// Manage Users
		// ------------------------------------------------------------

		'manage_users': {
			url: '/manage/user',
			templateUrl: 'pages/manage/users/manage/manage.html',
			controller: 'userManageCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				title: 'All Users'
			}
		},

		'new_user': {
			url: '/manage/user/new?class',
			templateUrl: 'pages/manage/users/new/new.html',
			controller: 'userNewCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				crumb_parent: 'manage_users',
				title: 'New User'
			}
		},

		'import_users': {
			url: '/manage/user/import',
			templateUrl: 'pages/manage/users/import/import.html',
			controller: 'userImportCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				crumb_parent: 'manage_users',
				title: 'Import Users'
			}
		},

		'export_users': {
			url: '/manage/user/export',
			templateUrl: 'pages/manage/users/export/export.html',
			controller: 'userExportCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				crumb_parent: 'manage_users',
				title: 'Export Users'
			}
		},

		'view_user': {
			url: '/manage/user/:id',
			templateUrl: 'pages/manage/users/view/view.html',
			controller: 'userViewCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				crumb_parent: 'manage_users',
				title: 'View User'
			}
		},

		'edit_user': {
			url: '/manage/user/:id/edit',
			templateUrl: 'pages/manage/users/edit/edit.html',
			controller: 'userEditCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				crumb_parent: 'view_user',
				title: 'Edit User'
			}
		},

		'new_note': {
			url: '/manage/user/:id/note/new',
			templateUrl: 'pages/manage/users/new_note/new_note.html',
			controller: 'userNewNoteCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				crumb_parent: 'view_user',
				title: 'New Note'
			}
		},

		'view_note': {
			url: '/manage/user/:id/note/:id2',
			templateUrl: 'pages/manage/users/view_note/view_note.html',
			controller: 'userViewNoteCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				crumb_parent: 'view_user',
				title: 'View Note'
			}
		},

		'edit_note': {
			url: '/manage/user/:id/note/:id2/edit',
			templateUrl: 'pages/manage/users/edit_note/edit_note.html',
			controller: 'userEditNoteCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				crumb_parent: 'view_user',
				title: 'Edit Note'
			}
		},

		// ------------------------------------------------------------
		// Manage Class Types
		// ------------------------------------------------------------

		'manage_class_types': {
			url: '/manage/class-type',
			templateUrl: 'pages/manage/class-types/manage/manage.html',
			controller: 'classTypeManageCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				title: 'All Class Types'
			}
		},

		'new_class_type': {
			url: '/manage/class-type/new',
			templateUrl: 'pages/manage/class-types/new/new.html',
			controller: 'classTypeNewCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'manage_class_types',
				title: 'New Class Type'
			}
		},

		'view_class_type': {
			url: '/manage/class-type/:id',
			templateUrl: 'pages/manage/class-types/view/view.html',
			controller: 'classTypeViewCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'manage_class_types',
				title: 'View Class Type'
			}
		},

		'edit_class_type': {
			url: '/manage/class-type/:id/edit',
			templateUrl: 'pages/manage/class-types/edit/edit.html',
			controller: 'classTypeEditCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'view_class_type',
				title: 'Edit Class Type'
			}
		},

		// ------------------------------------------------------------
		// Manage Classes
		// ------------------------------------------------------------

		'manage_class': {
			url: '/manage/class',
			templateUrl: 'pages/manage/classes/manage/manage.html',
			controller: 'classManageCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				title: 'All Classes'
			}
		},

		'new_class': {
			url: '/manage/class/new?type&code',
			templateUrl: 'pages/manage/classes/new/new.html',
			controller: 'classNewCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'manage_class',
				title: 'New Class'
			}
		},

		'view_class': {
			url: '/manage/class/:id',
			templateUrl: 'pages/manage/classes/view/view.html',
			controller: 'classViewCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'manage_class',
				title: 'View Class'
			}
		},

		'edit_class': {
			url: '/manage/class/:id/edit',
			templateUrl: 'pages/manage/classes/edit/edit.html',
			controller: 'classEditCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'view_class',
				title: 'Edit Class'
			}
		},

		'allow_products_for_class': {
			url: '/manage/class/:id/allowed_products',
			templateUrl: 'pages/manage/classes/allowed_products/allowed_products.html',
			controller: 'classProductCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'view_class',
				title: 'Allow Product'
			}
		},

		// ------------------------------------------------------------
		// Manage Product Types
		// ------------------------------------------------------------

		'manage_product_type': {
			url: '/manage/product-type',
			templateUrl: 'pages/manage/product-types/manage/manage.html',
			controller: 'productTypeManageCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				title: 'All Product Types'
			}
		},

		'new_product_type': {
			url: '/manage/product-type/new',
			templateUrl: 'pages/manage/product-types/new/new.html',
			controller: 'productTypeNewCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'manage_product_type',
				title: 'New Product Type'
			}
		},

		'view_product_type': {
			url: '/manage/product-type/:id',
			templateUrl: 'pages/manage/product-types/view/view.html',
			controller: 'productTypeViewCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'manage_product_type',
				title: 'View Product Type'
			}
		},

		'edit_product_type': {
			url: '/manage/product-type/:id/edit',
			templateUrl: 'pages/manage/product-types/edit/edit.html',
			controller: 'productTypeEditCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'view_product_type',
				title: 'Edit Product Type'
			}
		},

		// ------------------------------------------------------------
		// Manage Products
		// ------------------------------------------------------------

		'manage_product': {
			url: '/manage/product',
			templateUrl: 'pages/manage/products/manage/manage.html',
			controller: 'productManageCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				title: 'All Products'
			}
		},

		'new_product': {
			url: '/manage/product/new?type&name',
			templateUrl: 'pages/manage/products/new/new.html',
			controller: 'productNewCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'manage_product',
				title: 'New Product'
			}
		},

		'view_product': {
			url: '/manage/product/:id',
			templateUrl: 'pages/manage/products/view/view.html',
			controller: 'productViewCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'manage_product',
				title: 'View Product'
			}
		},

		'edit_product': {
			url: '/manage/product/:id/edit',
			templateUrl: 'pages/manage/products/edit/edit.html',
			controller: 'productEditCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'view_product',
				title: 'Edit Product'
			}
		},

		// ------------------------------------------------------------
		// Manage Units
		// ------------------------------------------------------------

		'manage_unit': {
			url: '/manage/unit',
			templateUrl: 'pages/manage/units/manage/manage.html',
			controller: 'unitManageCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				title: 'All Units'
			}
		},

		'new_unit': {
			url: '/manage/unit/new?product',
			templateUrl: 'pages/manage/units/new/new.html',
			controller: 'unitNewCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'manage_unit',
				title: 'New Unit'
			}
		},

		'import_units': {
			url: '/manage/unit/import',
			templateUrl: 'pages/manage/units/import/import.html',
			controller: 'unitImportCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				crumb_parent: 'manage_units',
				title: 'Import Units'
			}
		},

		'export_units': {
			url: '/manage/unit/export',
			templateUrl: 'pages/manage/units/export/export.html',
			controller: 'unitExportCtrl',
			data: {
				conditions: ['auth', 'staff_only'],
				crumb_parent: 'manage_units',
				title: 'Export Units'
			}
		},

		'view_unit': {
			url: '/manage/unit/:id',
			templateUrl: 'pages/manage/units/view/view.html',
			controller: 'unitViewCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'manage_unit',
				title: 'View Unit'
			}
		},

		'edit_unit': {
			url: '/manage/unit/:id/edit',
			templateUrl: 'pages/manage/units/edit/edit.html',
			controller: 'unitEditCtrl',
			data: {
				conditions: ['auth', 'manager_only'],
				crumb_parent: 'view_unit',
				title: 'Edit Unit'
			}
		}
	};

	for (var stateName in states) {
		var state = states[stateName];

		if (state.data && state.data.crumb_parent) {
			state.data.crumb_parent = states[state.data.crumb_parent];
		}

		$stateProvider.state(stateName, state);
	}
}]);
'use strict';

angular.module('app.directives').directive('alert', function () {
	return {
		restrict: 'E',
		replace: true,
		transclude: true,
		templateUrl: 'directives/alert/alert.html',
		scope: {
			type: '@',
			text: '@',
			icon: '@'
		}
	};
});
'use strict';

angular.module('app.directives').directive('boxChecker', function () {
	function link(scope, el, attrs) {
		el.on('mouseover', function (e) {
			if (boxChecker.mousedown && boxChecker.shift) {
				scope.boxChecker = boxChecker.setState;
				scope.$apply();
			}
		}).on('mousedown', function (e) {
			boxChecker.setState = !scope.boxChecker;
			boxChecker.mousedown = true;
			scope.boxChecker = boxChecker.setState;
			scope.$apply();
		}).on('click', function (e) {
			return e.preventDefault();
		}).on('mouseup', function () {
			return boxChecker.mousedown = false;
		});
	}

	return {
		restrict: 'A',
		link: link,
		scope: {
			'boxChecker': '='
		}
	};
});

var boxChecker = {
	mousedown: false,
	setState: false
};

$(document).on('mouseup', function () {
	boxChecker.mousedown = false;
}).on('keydown', function (e) {
	if (e.which == 16) {
		boxChecker.shift = true;
	}
}).on('keyup', function (e) {
	if (e.which == 16) {
		boxChecker.shift = false;
	}
});
'use strict';

angular.module('app.directives').directive('breadcrumbs', ["$state", "$location", "$stateParams", function ($state, $location, $stateParams) {
	function link(scope, el, attrs) {
		scope.state = $state;
		scope.current_url = $location.path();

		scope.crumbs = [];(function getCrumbs(state) {
			if (state.data.crumb_parent) {
				scope.crumbs.push(state.data.crumb_parent);

				getCrumbs(state.data.crumb_parent);
			}
		})($state.current);

		scope.crumbs.reverse();

		scope.fix = function (url) {
			if (url.indexOf(':') != -1) {
				return url.split('/').map(function (segment) {
					if (segment[0] != ':') {
						return segment;
					} else {
						if ($stateParams[segment.slice(1)]) {
							return $stateParams[segment.slice(1)];
						} else {
							return segment;
						}
					}
				}).join('/').split('?')[0];
			} else {
				return url.split('?')[0];
			}
		};
	}

	return {
		restrict: 'E',
		replace: true,
		transclude: false,
		link: link,
		templateUrl: 'directives/breadcrumbs/breadcrumbs.html',
		scope: {}
	};
}]);
'use strict';

angular.module('app.directives').directive('btn', ["$state", "$store", "$auth", function ($state, $store, $auth) {
	function link(scope, el, attrs, ctrl, $transclude) {
		scope.small = attrs.small !== undefined ? true : false;
		scope.large = attrs.large !== undefined ? true : false;
		scope.spin = attrs.spin !== undefined ? true : false;
		scope.circle = attrs.circle !== undefined ? true : false;

		if (!scope.type) scope.type = 'primary';

		// http://stackoverflow.com/questions/21547781/detect-if-a-transclude-content-has-been-given-for-a-angularjs-directive
		$transclude(function (clone) {
			if (clone.length) {
				scope.hasTranscluded = true;
			}
		});
	}

	return {
		restrict: 'E',
		replace: true,
		transclude: true,
		link: link,
		templateUrl: 'directives/btn/btn.html',
		scope: {
			icon: '@',
			type: '@',
			url: '@',
			disable: '='
		}
	};
}]);
'use strict';

angular.module('app.directives').directive('dateInput', ["$rootScope", function ($rootScope) {
	function link(scope, el, attrs) {
		scope.dateOptions = {
			showWeeks: false,
			format: 'd MMM yyyy'
		};

		scope.open = false;

		scope.toggle = function () {
			scope.open = !scope.open;
		};

		scope.clear = function () {
			scope.model = '';
		};
	}

	return {
		restrict: 'E',
		link: link,
		replace: true,
		templateUrl: 'directives/date-input/date-input.html',
		scope: {
			model: '=ngModel',
			change: '=ngChange'
		}
	};
}]);
'use strict';

angular.module('app.directives').directive('dropdown', ["$timeout", function ($timeout) {
	function link(scope, el, attrs) {

		scope.nullable = attrs.nullable !== undefined;
		scope.listDown = true;
		scope.filter_val = '';
		scope.filter_text = '';

		var elem = el[0];
		var dropdownList = el.find('.ns-dropdown-list');
		var ignoreBlur = false;

		function checkHeight() {
			var offset = $(elem).offset();

			dropdownList.removeClass('ns-dropdown-hide');
			var listHeight = dropdownList.height();

			if (window.innerHeight > offset.top + el.height() + listHeight) {
				dropdownList.removeClass('ns-dropdown-list-up');
			} else {
				dropdownList.addClass('ns-dropdown-list-up');
			}
		}

		scope.orderFunc = function (i) {
			if (scope.orderBy) {
				return scope.orderBy(i);
			} else {
				return false;
			}
		};

		scope.hideFunc = function (item, index, array) {
			if (scope.hide) {
				return scope.hide(item, index, array);
			} else {
				return {};
			}
		};

		scope.text = function (item) {
			if (!scope.display.text) return '';
			if (typeof scope.display.text == 'function') {
				return scope.display.text(item);
			} else {
				return item[scope.display.text];
			}
		};

		scope.subtext = function (item) {
			if (!scope.display.subtext) return '';
			if (typeof scope.display.subtext == 'function') {
				return scope.display.subtext(item);
			} else {
				return item[scope.display.subtext];
			}
		};

		scope.select = function (item) {
			dropdownList.addClass('ns-dropdown-hide');

			var target = el.find('[data-id=' + item.id + ']');

			el.find('.ns-dropdown-item.focused').removeClass('focused');
			target.addClass('focused');

			$timeout(function () {
				scope.ngModel = item;

				scope.filter_text = scope.text(item);
				scope.filter_val = '';
			});
		};

		scope.clear = function () {
			scope.ngModel = null;
			scope.filter_text = '';
			dropdownList.addClass('ns-dropdown-hide');
		};

		scope.$watch('ngModel', function (newVal) {
			if (newVal) scope.filter_text = scope.text(scope.ngModel);else scope.filter_text = '';
		});

		el.on('mousedown', '.ns-dropdown-list', function (e) {
			ignoreBlur = true;
		}).on('focus', 'input', function (e) {
			scope.$apply(function () {
				scope.filter_text = '';
				dropdownList.removeClass('ns-dropdown-hide');
				ignoreBlur = false;
				checkHeight();

				$timeout(function () {
					if (el.find('.ns-dropdown-item.focused').length === 0) {
						el.find('.ns-dropdown-item').first().addClass('focused');
					}

					el.find('.ns-dropdown-list')[0].scrollTop = el.find('.ns-dropdown-item.focused')[0].offsetTop;
				});
			});
		}).on('blur', 'input', function (e) {
			if (!ignoreBlur) {
				var highlighted = el.find('.focused');
				var id = highlighted.data('id');

				var item = scope.filtered.find(function (i) {
					return i.id == id;
				});

				if (!item) item = scope.filtered[0];

				scope.select(item);

				scope.$apply(function () {
					if (scope.ngModel) {
						scope.filter_text = scope.text(scope.ngModel);
					} else {
						scope.filter_text = '';
					}

					dropdownList.addClass('ns-dropdown-hide');
				});

				scope.filter_val = '';
			}
		}).on('keydown', 'input', function (e) {
			var focused = el.find('.ns-dropdown-item.focused');
			var index = focused.index();

			$timeout(function () {
				scope.filter_val = scope.filter_text;

				if (el.find('.ns-dropdown-item.focused').length === 0) {
					el.find('.ns-dropdown-item').first().addClass('focused');
				}
			});

			if (e.which == 13) {
				// enter
				e.preventDefault();
				if (scope.filtered.length) {
					scope.select(scope.filtered[index]);
					$(this).trigger('blur');
				}
			}

			if (e.which == 27) {
				// esc
				e.preventDefault();
				$(this).trigger('blur');
				scope.filter_text = '';
			}

			if (e.which == 38) {
				// up
				e.preventDefault();
				if (index >= 0) {
					el.find('.ns-dropdown-item.focused').removeClass('focused').prev().addClass('focused');
				}
			}

			if (e.which == 40) {
				// down
				e.preventDefault();
				if (index < scope.filtered.length - 1) {
					el.find('.ns-dropdown-item.focused').removeClass('focused').next().addClass('focused');
				}
			}

			if (e.which == 38 || e.which == 40) {
				// up or down
				var target = el.find('.ns-dropdown-item.focused')[0];
				var list = el.find('.ns-dropdown-list')[0];

				if (target && target.offsetTop < list.scrollTop) {
					// above the top edge
					list.scrollTop = target.offsetTop;
				} else if (target && target.offsetTop + target.clientHeight > list.clientHeight + list.scrollTop) {
					// below the bottom edge
					list.scrollTop = target.offsetTop + target.clientHeight - list.clientHeight;
				}
			}
		});
	}

	return {
		link: link,
		restrict: 'E',
		replace: true,
		templateUrl: 'directives/dropdown/dropdown.html',
		scope: {
			'data': '=',
			'ngModel': '=',
			'display': '=',
			'orderBy': '=',
			'hide': '=',
			'icon': '@'
		}
	};
}]);
'use strict';

angular.module('app.directives').directive('fileread', function () {
	return {
		scope: {
			fileread: '=',
			loader: '='
		},
		link: function link(scope, element, attributes) {
			var file = null;

			if (!scope.loader) scope.loader = {};

			element.bind('change', function (changeEvent) {
				file = changeEvent.target.files[0];
				scope.loader.load();
			});

			scope.loader.load = function () {
				var reader = new FileReader();

				var xlsxMode = false;

				if (file.name.split('.').indexOf('xlsx') !== -1) {
					xlsxMode = true;
					reader.readAsBinaryString(file);
				} else {
					reader.readAsText(file);
				}

				reader.onload = function (loadEvent) {
					scope.$apply(function () {
						scope.fileread = loadEvent.target.result;
						scope.loader.loaded(loadEvent.target.result, xlsxMode ? 'xlsx' : 'csv');
					});
				};
			};
		}
	};
});
'use strict';

angular.module('app.directives').directive('filter', ["$rootScope", function ($rootScope) {
	function link(scope, el, attrs) {
		window.onkeyup = function (e) {
			if (e.which == 70 && e.ctrlKey === true) {
				el.find('input').focus();
			}
		};
	}

	return {
		restrict: 'E',
		replace: true,
		link: link,
		templateUrl: 'directives/filter/filter.html',
		scope: {
			model: '=',
			filtered: '='
		}
	};
}]);
'use strict';

angular.module('app.directives').directive('loader', ["$rootScope", function ($rootScope) {
	function link(scope, el, attrs) {
		scope.loader = $rootScope.loader;
	}

	return {
		restrict: 'E',
		replace: false,
		link: link,
		templateUrl: 'directives/loader/loader.html'
	};
}]);
'use strict';

angular.module('app.directives').directive('navLink', ["$location", "$state", "$rootScope", function ($location, $state, $rootScope) {
	function link(scope, el, attrs) {
		$rootScope.$on('$stateChangeSuccess', function (event, toState, toStateParams) {
			render(toState);
		});

		function render(state) {
			if ($location.path() == scope.url.replace('#', '')) {
				el.addClass('current');
			} else {
				el.removeClass('current');
			}

			scope.crumbs = [];

			getCrumbs(state);

			function getCrumbs(state) {
				if (state.data && state.data.crumb_parent) {
					scope.crumbs.push(state.data.crumb_parent);

					getCrumbs(state.data.crumb_parent);
				}
			}

			_.forEach(scope.crumbs, function (crumb) {
				var url = crumb.url;

				if (url.indexOf('?') > -1) {
					url = url.substring(0, url.indexOf('?'));
				}

				if (scope.url.replace('#', '') == url) {
					el.addClass('current');
				}
			});
		}

		render($state.current);
	}

	return {
		restrict: 'A',
		replace: false,
		transclude: false,
		link: link,
		templateUrl: 'directives/navLink/navLink.html',
		scope: {
			'navLink': '@',
			'url': '@',
			'icon': '@',
			'number': '@',
			'loading': '='
		}
	};
}]);
'use strict';

angular.module('app.directives').directive('pageHeader', ["$rootScope", function ($rootScope) {
	function link(scope, el, attrs) {
		scope.showBreadcrumbs = scope.breadcrumbs !== undefined ? scope.breadcrumbs : true;
	}

	return {
		restrict: 'E',
		replace: true,
		link: link,
		transclude: true,
		templateUrl: 'directives/pageHeader/pageHeader.html',
		scope: {
			text: '@',
			breadcrumbs: '=',
			count: '='
		}
	};
}]);
'use strict';

angular.module('app.directives').directive('pager', ["$state", "$store", "$auth", "$queryString", function ($state, $store, $auth, $queryString) {
	function link(scope, el, attrs) {
		var old = null;

		scope.getLimit = function () {
			return scope.filter ? 99 : scope.limit;
		};

		function calculate() {
			scope.pages = [];
			scope.allpages = [];

			scope.current = scope.current ? scope.current : old ? old : 1;

			var range = 2;
			var max = range * 2 + 1;

			scope.totalpages = Math.ceil((scope.filter ? scope.filtered.length : scope.data.length) / scope.getLimit());

			var start = scope.getCurrent() - range > 1 ? scope.getCurrent() - range : 1;

			if (start > scope.totalpages - max + 1) {
				start = scope.totalpages - max + 1;
			}

			start = start <= 1 ? 1 : start;

			for (var i = start; i <= scope.totalpages; i++) {
				if (i > scope.getCurrent() - range && i < scope.getCurrent() + range || scope.pages.length < max) {
					scope.pages.push(i);
				}
			}

			for (var j = 1; j <= scope.totalpages; j++) {
				scope.allpages.push(j);
			}
		}

		scope.$watch('data', calculate, true);
		scope.$watch('current', calculate);
		scope.$watch('filter', calculate);
		scope.$watch('limit', calculate);

		scope.setCurrent = function (val) {
			scope.current = val;

			scope.updateOld();
		};

		scope.updateOld = function () {
			if (scope.current === null) return;

			old = scope.current;
		};

		scope.getCurrent = function () {
			return scope.filter ? 1 : scope.current ? scope.current : old ? old : 1;
		};
	}

	return {
		restrict: 'E',
		replace: true,
		link: link,
		templateUrl: 'directives/pager/pager.html',
		scope: {
			current: '=',
			limit: '=',
			data: '=',
			filtered: '=',
			filter: '='
		}
	};
}]);
'use strict';

angular.module('app.directives').directive('pagination', ["$state", "$store", "$auth", "$queryString", "$window", function ($state, $store, $auth, $queryString, $window) {
	function link(scope, el, attrs) {
		function calculate() {
			scope.pages = [];
			scope.allpages = [];
			var range = 2; // how many pages displayed either side of the current page
			var max = range * 2 + 1;

			scope.last = Math.ceil(scope.total / scope.filter.limit);

			var start = scope.filter.page - range > 1 ? scope.filter.page - range : 1;

			if (start > scope.last - max + 1) {
				start = scope.last - max + 1;
			}

			start = start <= 1 ? 1 : start;

			for (var i = start; i < scope.last + 1; i++) {
				if (i > scope.filter.page - range && i < scope.filter.page + range || scope.pages.length < max) {
					scope.pages.push(i);
				}
			}

			for (var j = 1; j <= scope.last; j++) {
				scope.allpages.push(j);
			}

			scope.current = scope.filter.page;

			scope.atStart = scope.filter.page !== 1;
			scope.atEnd = scope.filter.page + range <= scope.total / scope.filter.limit;
		}

		scope.$watch('total', calculate);

		scope.$watch('filter', function (newVal) {
			scope.query = '&' + $queryString(_.omit(scope.filter, ['page']));
		}, true);

		scope.goto = function () {
			// bookings?page={{ last }}{{ query }}
			console.log('bookings?page=' + scope.current + scope.query);
			$window.location.href = 'bookings?page=' + scope.current + scope.query;
		};
	}

	return {
		restrict: 'E',
		replace: true,
		link: link,
		templateUrl: 'directives/pagination/pagination.html',
		scope: {
			total: '=',
			filter: '='
		}
	};
}]);
'use strict';

angular.module('app.directives').directive('sidebar', ["$store", "$state", "$auth", "$load", "$location", "$rootScope", "$http", function ($store, $state, $auth, $load, $location, $rootScope, $http) {
	function link(scope, el, attrs) {
		scope.auth = $auth;
		scope.user = $store.user;
		scope.store = $store;

		$load.listen('user', function (user) {
			scope.user = user;
			scope.loading_bookings = true;

			// no idea if this little part actually works
			if (!$auth.isAuthenticated() && $state.current.data.conditions.indexOf('auth') !== -1) {
				$location.path('/');
			}
		});

		$load.listen('booking_count', function (res) {
			scope.bookings_count = parseInt(res.data.total);
			scope.loading_bookings = false;
		});
	}

	return {
		restrict: 'E',
		replace: true,
		transclude: false,
		link: link,
		templateUrl: 'directives/sidebar/sidebar.html',
		scope: {}
	};
}]);
'use strict';

angular.module('app.directives').directive('selectDark', function () {
	function link(scope, element, attrs, $select) {
		element.addClass('ui-select-dark');
	}

	return {
		restrict: 'A',
		require: 'uiSelect',
		link: link
	};
});
'use strict';

angular.module('app.directives').directive('selectUnitOnClose', function () {
	function link(scope, element, attrs, $select) {
		angular.element($select.searchInput).on('keyup', function () {
			var search = this.value;

			_.forEach($select.items, function (item) {
				var a = item.unit_number;

				if (search == a) {
					$select.select(item);
				}
			});
		});
	}

	return {
		restrict: 'A',
		require: 'uiSelect',
		link: link
	};
});
'use strict';

angular.module('app.filters').filter('page', ["$filter", function ($filter) {
	return function (input, page, limit, trigger) {
		if (!trigger || trigger && input.length <= trigger) {
			return input;
		} else {
			return $filter('limitTo')(input, limit, (page - 1) * limit);
		}
	};
}]);
'use strict';

angular.module('app.controllers').controller('confirmCtrl', ["$scope", "$store", "$location", "$http", "$invalidate", function ($scope, $store, $location, $http, $invalidate) {
	if (!$store.booking.pickup_at) {
		$location.path('/book');
	}

	$scope.user = $store.user;
	$scope.booking = $store.booking;
	$scope.allowedProducts = [];
	$scope.overallAllowed = true;
	$scope.terms = $store.get('settings', { key: 'terms' });

	$scope.product = function (id) {
		return $store.get('products', id);
	};

	_.forEach($scope.booking.products, function (product) {

		$scope.booking.pickup_at = moment($scope.booking.pickup_at).startOf('day')._d;

		console.log('product', product);

		if (product.limitless) {
			$scope.allowedProducts.push(product.id);
			return;
		}

		$http.post('/api/product/' + product.id + '/check', { pickup_at: $scope.booking.pickup_at, due_at: $scope.booking.due_at }).then(function (res) {
			if (res.data.allowed) {
				$scope.allowedProducts.push(parseInt(res.data.id));
			} else {
				$scope.overallAllowed = false;
			}
		});
	});

	$scope.allowed = function (id) {
		return $scope.allowedProducts.indexOf(id) >= 0;
	};

	$scope.confirm = function () {
		if (!$scope.user.can_book) {
			return;
		}

		$store.booking.pickup_at = new Date($store.booking.pickup_at);
		$store.booking.due_at = new Date($store.booking.due_at);

		$http.post('/api/booking', $store.booking).then(function (res) {
			$store.resetBooking();

			$invalidate.add('booking_count');
			$location.path('/book/success');
		});
	};

	$scope.disableSubmit = function () {
		return !$scope.overallAllowed || !$scope.booking.due_at || !$scope.booking.pickup_at || !$scope.booking.products.length || !$scope.readTerms;
	};
}]);
'use strict';

angular.module('app.controllers').controller('editBookingCtrl', ["$scope", "$stateParams", "$store", "$location", "$http", "$invalidate", function ($scope, $stateParams, $store, $location, $http, $invalidate) {

	$scope.user = $store.user;
	$scope.booking = $store.get('bookings', $stateParams.id);

	$scope.dateOptions = {
		showWeeks: false,
		format: 'd MMM yyyy',
		minDate: new Date()
	};

	$scope.select2Options = {
		selectOnClose: true
	};

	$scope.openPickup = function () {
		$scope.openPickupDate = $scope.openPickupDate ? false : true;
	};

	$scope.openDue = function () {
		$scope.openDueDate = $scope.openDueDate ? false : true;
	};

	$scope.save = function () {

		if ($scope.booking._priority == 1) {

			$scope.booking.products = [];

			_.forEach($scope.products, function (product) {
				if (!product._quantity) return;

				$scope.booking.products.push({
					id: product.id,
					quantity: product._quantity
				});
			});

			$http.put('/api/booking/' + $scope.booking.id, $scope.booking).then(function (res) {
				$invalidate.add('bookings');

				$location.path('/booking/' + $scope.booking.id);
			});
		}
	};

	// calculate the max quantity allowed for a product
	$scope.max = function (product) {
		return product._max;
	};

	// load all the products allowed based on the current users group.
	// if the current user doesn't have a group, give them all the products
	$scope.group = $store.get('groups', $store.user.group_id);

	if (!$scope.group) {
		$scope.products = $store.products;

		_.forEach($scope.products, function (product) {
			product._max = product.units.length;
			product._quantity = undefined;
		});
	} else {
		$scope.products = $scope.group.allowed_products;

		_.forEach($scope.products, function (product) {
			product._max = product.pivot.quantity;
			product._quantity = undefined;
		});
	}

	// set up the fake quantity values
	$scope.booking.products.forEach(function (bookedProduct) {
		var product = _.find($scope.products, function (p) {
			return p.id == bookedProduct.id;
		});

		if (!product._quantity) product._quantity = 0;
		product._quantity += 1;
	});
}]);
'use strict';

angular.module('app.controllers').controller('issueCtrl', ["$scope", "$stateParams", "$store", "$location", "$http", "$invalidate", "$load", "$prepare", function ($scope, $stateParams, $store, $location, $http, $invalidate, $load, $prepare) {

	$scope.booking = $store.get('bookings', $stateParams.id);
	$scope.errors = [];
	$scope.allUnits = [];

	$scope.unit_number = function (u) {
		return parseInt(u.unit_number);
	};

	if (!$scope.booking) {
		$scope.booking = $load.booking($stateParams.id);
	}

	$scope.booking.$promise.then(function (b) {

		// this is all to solve some weird issue with the dropdown and the units array
		b._products.forEach(function (p) {
			var arr = [];

			p.units.forEach(function (u) {
				arr.push({
					id: u.id,
					unit_number: u.unit_number
				});
			});

			$scope.allUnits.push(arr);
		});

		$scope.products = _.clone(b.products);
	}, function (err) {
		$scope.errors.push({ message: err.data.error });
	});

	$scope.issue = function () {
		var allChosen = true;

		$scope.products.forEach(function (p) {
			if (!p._unit && !p._taken) allChosen = false;
		});

		if (allChosen) {
			$scope.booking.taken_at = new Date();
			$scope.booking.issued_by_id = $store.user.id;

			$scope.booking.products.forEach(function (p, i) {
				if ($scope.products[i]._unit) {
					p.unit = $store.get('units', $scope.products[i]._unit.id);
				}
			});

			$http.put('/api/booking/' + $scope.booking.id, $scope.booking).then(function (res) {
				// this code was causing problems. I don't think I need it, but I might.
				// I think the problem was with res.id, I think it needs to be res.data.id
				// I never checked it
				// $store.bookings = _.map($store.bookings, function(booking, i) {
				// 	if(booking.id == res.id) $store.bookings[i] = res
				// })

				// $location.path('/booking/' + $scope.booking.id)
				$location.path('/bookings');
			});
		} else {
			if (_.findIndex($scope.errors, { code: 1 }) === -1) {
				$scope.errors.push({ code: 1, message: 'You need to assign a unit for every product.' });
			}
		}
	};

	$scope.isntSelected = function (currentProduct) {
		return function (value, index, array) {
			var notSelected = true;

			_.forEach($scope.booking.products, function (product) {
				if (currentProduct == product) return;

				if (product.unit && product.unit.id == value.id) {
					notSelected = false;
				}
			});

			return notSelected;
		};
	};
}]);
'use strict';

angular.module('app.controllers').controller('makeCtrl', ["$scope", "$store", "$location", function ($scope, $store, $location) {

	$scope.selectedProducts = [{ quantity: 1 }];
	$scope.user = $store.user;
	$scope.booking = $store.booking;

	if ($store.booking && $store.booking.products && $store.booking.products.length) {
		$scope.selectedProducts = [];

		$store.booking.products.forEach(function (p) {
			$scope.selectedProducts.push({
				product: $store.get('products', p.id),
				quantity: p.quantity
			});
		});
	}

	if ($store.user.admin) {
		$scope.users = $store.users;
	} else {
		$scope.users = [];
	}

	$scope.user_group = function (user) {
		return user.group ? user.group.code : '';
	};
	$scope.product_type = function (product) {
		return product.type ? product.type.name : '';
	};

	$scope.filterAdded = function (value, index, array) {
		var found = false;

		$scope.selectedProducts.forEach(function (v) {
			if (v.product && v.product.id == value.id) {
				found = true;
			}
		});

		return !found;
	};

	if (!$scope.booking._user) {
		$scope.booking._user = $store.user;
	}

	if (!$scope.booking.pickup_at) {
		$scope.booking.pickup_at = new Date();
	} else if ($scope.booking.due_at && $scope.booking.pickup_at.valueOf() > $scope.booking.due_at.valueOf()) {
		$scope.booking.pickup_at = new Date();
		$scope.booking.due_at = '';
	}

	$scope.reset = function () {
		$store.resetBooking();
		$scope.booking.pickup_at = new Date();
		$scope.booking.due_at = undefined;
		$scope.booking._user = $store.user;
		$scope.selectedProducts = [{ quantity: 1 }];
	};

	$scope.addProduct = function () {
		$scope.selectedProducts.push({ quantity: 1 });
	};

	$scope.removeProduct = function (product, index) {
		$scope.selectedProducts.splice(index, 1);

		if (!$scope.selectedProducts.length) {
			$scope.addProduct();
		}
	};

	$scope.book = function () {
		$scope.createBooking();
		$location.path('/book/confirm');
	};

	$scope.createBooking = function () {
		var payload = [];

		_.forEach($scope.selectedProducts, function (selected) {
			if (parseInt(selected.quantity) > 0 || selected.product.limitless) {
				if (selected.product) {
					payload.push({
						id: selected.product.id,
						quantity: selected.quantity,
						limitless: selected.product.limitless
					});
				}
			}
		});

		$store.setBooking({
			due_at: $scope.booking.due_at,
			pickup_at: $scope.booking.pickup_at,
			products: payload,
			_user: $scope.booking._user
		});
	};

	$scope.checkAgainstMax = function (product) {
		var max = $scope.max(product);

		if (product._quantity > product._max) {
			product._quantity = 1;
		}
		if (product._quantity === undefined) {
			product._quantity = product._max;
		}
	};

	// calculate the max quantity allowed for a product
	$scope.max = function (product) {
		if (!product) return 1;
		return product._max;
	};

	// load all the products allowed based on the current users group.
	if ($store.user.group_id) {
		$scope.group = $store.get('groups', $store.user.group_id);

		if ($scope.group) {
			$scope.products = $scope.group.allowed_products;

			_.forEach($scope.products, function (product) {
				product._max = product.pivot.quantity;
			});
		}

		// if the current user doesn't have a group, give them all the products
	} else {
		$scope.products = $store.products;

		_.forEach($scope.products, function (product) {
			product._max = product.units.length;

			if ($scope.booking.products && $scope.booking.products.length) {
				var booking = _.find($scope.booking.products, function (p) {
					return p.id == product.id;
				});

				if (booking) product._quantity = booking.quantity;
			}
		});
	}
}]);
'use strict';

angular.module('app.controllers').controller('bookingsManageCtrl', ["$scope", "$store", "$load", "$stateParams", "$timeout", "Booking", function ($scope, $store, $load, $stateParams, $timeout, Booking) {

	$scope.users = $store.users;
	$scope.groups = $store.groups;
	$scope.bookings = [];
	$scope.allBookings = [];

	function loadBookings(page) {
		$scope.loading = true;
		var bookings = $load.bookings(100, page);

		bookings.$promise.then(function (res) {
			_.forEach(res, function (a) {
				return $scope.bookings.push(a);
			});

			if (res.length == 100) {
				loadBookings(page + 1);
			} else {
				simplifyBookings();
				$scope.loading = false;
			}
		});
	}

	loadBookings(1);

	function simplifyBookings() {
		$scope.allBookings = $scope.bookings;

		$scope.bookings = [];

		_.forEach($scope.allBookings, function (booking) {
			$scope.bookings.push({
				id: booking.id,
				user: booking.user ? {
					name: booking.user.name,
					group: {
						code: booking.user.group ? booking.user.group.code : ''
					}
				} : { name: 'N/A' },
				closed_at: booking.closed_at,
				created_at: booking.created_at,
				_status: booking._status,
				_overdue: booking._overdue,
				_priority: booking._priority
			});
		});

		$scope.advFilter.apply();
	}

	// --------------------------------------------------------------------------------
	// Dates
	// --------------------------------------------------------------------------------

	$scope.dateOptions = {
		showWeeks: false,
		format: 'd MMM yyyy'
	};

	$scope.openAfterDate = function () {
		$scope.openAfterDateControl = $scope.openAfterDateControl ? false : true;
		$scope.filterUseAfterDate = true;
	};

	$scope.openBeforeDate = function () {
		$scope.openBeforeDateControl = $scope.openBeforeDateControl ? false : true;
		$scope.filterUseBeforeDate = true;
	};

	$scope.timediff = function (date, unit) {
		return moment().startOf('day').diff(moment(date).startOf('day'), unit) * -1;
	};

	$scope.diff = function (date) {
		return $scope.timediff(date, 'days');
	};

	$scope.days = function (num) {
		return num == 1 ? 'day' : 'days';
	};

	$scope.sortables = [{ text: 'Name' }, { text: 'Class' }, { text: 'Date' }];

	$scope.sortable = $scope.sortables[0];

	// --------------------------------------------------------------------------------
	// Filter
	// --------------------------------------------------------------------------------

	$scope.advFilter = {
		open: false,
		props: {},
		defaults: {
			after: null,
			before: null,
			user: null,
			overdue: true,
			closed: false,
			issued: true,
			booked: true,
			limit: 10
		},

		toggleOpen: function toggleOpen() {
			$scope.advFilter.open = !$scope.advFilter.open;
		},
		clear: function clear() {
			$scope.advFilter.props = _.clone($scope.advFilter.defaults);
			$scope.advFilter.apply();
		},
		clearUser: function clearUser() {
			$scope.advFilter.props.user = null;
		},
		importFromQueryString: function importFromQueryString(obj) {
			if (obj.user) $scope.advFilter.props.user = $store.get('users', parseInt(obj.user));
			$scope.advFilter.apply();
		},
		importFromLocalStorage: function importFromLocalStorage() {
			if (localStorage.advFilter) {
				$scope.advFilter.props = _.merge($scope.advFilter.props, JSON.parse(localStorage.advFilter));
			}

			$scope.advFilter.apply();
		},
		apply: function apply() {
			if ($scope.advFilter.props.limit === 0) return;

			var temp = [],
			    temp2 = [];

			_.forEach($scope.allBookings, function (booking) {
				var keep = true;

				if ($scope.advFilter.props.after) {
					if (booking.created_at.valueOf() < $scope.advFilter.props.after.valueOf()) {
						keep = false;
					}
				}

				if ($scope.advFilter.props.before) {
					if (booking.created_at.valueOf() > $scope.advFilter.props.before.valueOf()) {
						keep = false;
					}
				}

				if ($scope.advFilter.props.user) {
					if (booking.user.id !== $scope.advFilter.props.user.id) {
						keep = false;
					}
				}

				if (keep) temp.push(booking);
			});

			_.forEach(temp, function (booking) {
				var keep = false;

				if ($scope.advFilter.props.closed) {
					if (booking.closed_at) {
						keep = true;
					}
				}

				if ($scope.advFilter.props.issued) {
					if (booking.taken_at && !booking.closed_at && !booking._overdue) {
						keep = true;
					}
				}

				if ($scope.advFilter.props.overdue) {
					if (booking.taken_at && booking._overdue && !booking.closed_at) {
						keep = true;
					}
				}

				if ($scope.advFilter.props.booked) {
					if (!booking.taken_at) {
						keep = true;
					}
				}

				if (keep) temp2.push(booking);
			});

			$scope.bookings = temp2;
			$scope.advFilter.open = false;

			localStorage.setItem('advFilter', JSON.stringify($scope.advFilter.props));
		}
	};

	// $scope.advFilter.clear()

	if (typeof $scope.advFilter.props.limit == 'undefined') {
		$scope.advFilter.clear();
	}

	$scope.advFilter.importFromLocalStorage();

	$scope.advFilter.importFromQueryString($stateParams);

	$scope.group_code = function (user) {
		return user.group ? user.group.code : '';
	};

	// $scope.$watch('advFilter.props', function(newVal, oldVal) {
	// 	localStorage.setItem('advFilter', JSON.stringify($scope.advFilter.props))
	// }, true)
}]);
'use strict';

angular.module('app.controllers').controller('returnCtrl', ["$scope", "$stateParams", "$store", "$location", "$http", "$invalidate", "$load", function ($scope, $stateParams, $store, $location, $http, $invalidate, $load) {
	$scope.errors = [];
	$scope.booking = $store.get('bookings', $stateParams.id);

	window.$scope = $scope;

	if (!$scope.booking) {
		$scope.booking = $load.booking($stateParams.id);
	}

	$scope.booking.$promise.then(function (p) {
		p.products.map(function (p) {
			p.returned = !!p.pivot.returned_at;
			p.locked = !!p.pivot.returned_at;
		});
	}, function (err) {
		$scope.errors.push({ message: err.data.error });
	});

	$scope.unit = function (id) {
		return $store.get('units', id);
	};

	$scope.close = function () {

		if ($scope.booking.products.length == _.filter($scope.booking.products, function (p) {
			return p.returned;
		}).length) {
			$scope.booking.closed_at = new Date();
			$scope.booking.closed_by_id = $store.user.id;
		}

		_.forEach($scope.booking.products, function (product) {
			if (product.returned) product.returned_at = new Date();
		});

		$http.put('/api/booking/' + $scope.booking.id, $scope.booking).then(function (res) {
			$store.bookings = _.map($store.bookings, function (booking, i) {
				if (!booking) return;
				if (booking.id == res.id) $store.bookings[i] = res;
			});

			$load.booking_count();

			$location.path('/booking/' + $scope.booking.id);
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('successCtrl', ["$scope", "$store", function ($scope, $store) {}]);
'use strict';

angular.module('app.controllers').controller('viewBookingCtrl', ["$scope", "$stateParams", "$store", "$location", "$http", "$invalidate", "Booking", "$prepare", "$merge", function ($scope, $stateParams, $store, $location, $http, $invalidate, Booking, $prepare, $merge) {
	$scope.booking = $store.get('bookings', $stateParams.id);
	$scope.user = $store.user;
	$scope.errors = [];

	window.$scope = $scope;

	$scope.unit = function (id) {
		return $store.get('units', id);
	};

	if ($scope.booking) {
		$scope.return_difference = moment().diff(new Date($scope.booking.closed_at), 'hours');
	} else {
		$scope.booking = Booking.get({ id: $stateParams.id, with: 'user|products', token: localStorage.satellizer_token });

		$scope.booking.$promise.then($prepare.booking).then(function (booking) {
			$merge.bookings([booking]);
			$scope.return_difference = moment().diff(new Date($scope.booking.closed_at), 'hours');
			console.log('loaded', booking.products);
		}, function (err) {
			$scope.errors.push({ message: err.data.error });
		});
	}

	$scope.delete = function () {
		var confirmed = confirm('Are you sure you want to delete this?');

		if (confirmed) {
			$http.delete('/api/booking/' + $scope.booking.id).then(function () {
				$invalidate.add('booking_count');
				$location.path('/bookings');
			});
		}
	};
}]);
'use strict';

angular.module('app.controllers').controller('classTypeEditCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "Group_Type", function ($scope, $stateParams, $store, $location, $invalidate, Group_Type) {
	$scope.type = _.clone($store.get('group_types', $stateParams.id));

	$scope.save = function () {
		Group_Type.update({ id: $scope.type.id }, $scope.type).$promise.then(function (res) {
			$invalidate.add('group_types');

			$location.path('/manage/class-type/' + $scope.type.id);
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('classTypeManageCtrl', ["$scope", "$store", function ($scope, $store) {
	$scope.group_types = $store.group_types;
}]);
'use strict';

angular.module('app.controllers').controller('classTypeNewCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "Group_Type", function ($scope, $stateParams, $store, $location, $invalidate, Group_Type) {
	$scope.save = function () {
		var gt = new Group_Type();

		gt.code = $scope.code;
		gt.name = $scope.name;

		gt.$save().then(function (res) {
			$invalidate.add(['group_types', 'groups']);

			$location.path('/manage/class-type');
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('classTypeViewCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "sweetAlert", function ($scope, $stateParams, $store, $location, $invalidate, sweetAlert) {
	$scope.type = $store.get('group_types', $stateParams.id);

	window.scope = $scope;

	$scope.delete = function () {
		sweetAlert.swal({
			text: 'Are you sure you want to delete this?',
			showCancelButton: true,
			type: 'warning'
		}).then(function () {
			$scope.type.$delete().then(function () {
				$invalidate.add('group_types');

				$location.path('/manage/class-type');
			});
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('classProductCtrl', ["$scope", "$stateParams", "$store", "$location", "$http", "$timeout", "$invalidate", function ($scope, $stateParams, $store, $location, $http, $timeout, $invalidate) {
	$store.groups.$promise.then(function () {
		$scope.group = _.clone($store.get('groups', $stateParams.id));

		$scope.products = $store.products;

		_.forEach($scope.products, function (product) {
			_.forEach($scope.group.allowed_products, function (a) {
				if (a.id == product.id) {
					product._allowed = true;
					product._quantity = a.pivot.quantity;
					product._days_allowed = a.pivot.days_allowed;
				}
			});

			if (!product._quantity) {
				product._quantity = 1;
			}

			if (!product._days_allowed) {
				product._days_allowed = 1;
			}
		});
	});

	$timeout(function () {
		_.forEach($scope.products, function (product) {
			console.log(product.id, product._quantity);
		});
	});

	$timeout(function () {
		$scope.update = function (product) {
			if (product._allowed) {
				$scope.saved = false;
				$http.put('/api/product/' + product.id + '/allow/' + $scope.group.id, {
					quantity: product._quantity,
					days_allowed: product._days_allowed
				}).then(function (res) {
					$scope.saved = true;

					$invalidate.add(['groups', 'units']);
				});
			}
		};
	}, 1000);

	$scope.allow = function (product) {
		$scope.saved = false;

		console.log(product);

		if (product._allowed) {
			$http.post('/api/product/' + product.id + '/allow/' + $scope.group.id, {
				quantity: product._quantity,
				days_allowed: product._days_allowed
			}).then(function (res) {
				// console.log('res1', res)
				$scope.saved = true;

				$invalidate.add(['groups', 'units']);
			});
		} else {
			$http.post('/api/product/' + product.id + '/disallow/' + $scope.group.id).then(function (res) {
				// console.log('res2', res)
				$scope.saved = true;

				$invalidate.add(['groups', 'units']);
			});
		}
	};
}]);
'use strict';

angular.module('app.controllers').controller('classEditCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "Group", function ($scope, $stateParams, $store, $location, $invalidate, Group) {
	$scope.group = _.clone($store.get('groups', $stateParams.id));
	$scope.users = $store.users;
	$scope.types = $store.group_types;
	$scope.type = $scope.group.type ? $store.get('group_types', $scope.group.type.id) : null;
	$scope.tutors = $scope.group.tutors.length ? $scope.group.tutors : [null];
	$scope.staff = $scope.users.filter(function (u) {
		return u.admin > 0;
	});

	if ($scope.groups) {
		$scope.groups = $scope.groups.map(function (g) {
			g._code_name = g.code + ' - ' + g.name;
			return g;
		});
	}

	$scope.addTutor = function () {
		$scope.tutors.push(null);
	};

	$scope.removeTutor = function (index) {
		$scope.tutors.splice(index, 1);

		if (!$scope.tutors.length) {
			$scope.addTutor();
		}
	};

	$scope.save = function () {
		$scope.group.group_type_id = $scope.group.type ? $scope.group.type.id : '';
		$scope.group.tutors = [];

		_.forEach($scope.tutors, function (tutor) {
			if (tutor !== null && tutor.id) {
				$scope.group.tutors.push(tutor.id);
			}
		});

		Group.update({ id: $scope.group.id }, $scope.group).$promise.then(function (res) {
			$invalidate.add(['groups', 'users']);

			$location.path('/manage/class/' + $scope.group.id);
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('classManageCtrl', ["$scope", "$store", function ($scope, $store) {
	$scope.groups = $store.groups;
}]);
'use strict';

angular.module('app.controllers').controller('classNewCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "Group", function ($scope, $stateParams, $store, $location, $invalidate, Group) {
	var type = $stateParams.type;
	var code = $stateParams.code;

	$scope.users = $store.users;
	$scope.types = $store.group_types;
	$scope.type = null;
	$scope.tutors = [null];
	$scope.staff = $scope.users.filter(function (u) {
		return u.admin > 0;
	});

	if (type) $scope.type = $store.get('group_types', { code: type });
	if (code) {
		$scope.code = code;
		$store.group_types.forEach(function (gt) {
			if (code.indexOf(gt.code) !== -1) {
				$scope.type = gt;
			}
		});
	}

	$scope.tutorRole = function (value, index, array) {
		return value.admin > 0;
	};

	$scope.addTutor = function () {
		$scope.tutors.push(null);
	};

	$scope.removeTutor = function (index) {
		$scope.tutors.splice(index, 1);

		if (!$scope.tutors.length) {
			$scope.addTutor();
		}
	};

	$scope.save = function () {
		var g = new Group();

		g.code = $scope.code;
		g.group_type_id = $scope.type ? $scope.type.id : '';

		g.tutors = [];

		_.forEach($scope.tutors, function (tutor) {
			if (tutor !== null && tutor.id) {
				g.tutors.push(tutor.id);
			}
		});

		g.$save().then(function (res) {
			$invalidate.add(['groups', 'users']);

			$location.path('/manage/class');
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('classViewCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "sweetAlert", function ($scope, $stateParams, $store, $location, $invalidate, sweetAlert) {
	$scope.group = $store.get('groups', $stateParams.id);

	$scope.delete = function () {
		sweetAlert.swal({
			text: 'Are you sure you want to delete this?',
			showCancelButton: true,
			type: 'warning'
		}).then(function () {
			$scope.group.$delete().then(function () {
				$invalidate.add('groups');

				$location.path('/manage/class');
			});
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('manageCtrl', ["$scope", "$store", function ($scope, $store) {
	$scope.user = $store.user;
	$scope.store = $store;
}]);
'use strict';

angular.module('app.controllers').controller('productTypeEditCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "Product_Type", function ($scope, $stateParams, $store, $location, $invalidate, Product_Type) {
	$scope.type = _.clone($store.get('product_types', $stateParams.id));

	$scope.save = function () {
		Product_Type.update({ id: $scope.type.id }, $scope.type).$promise.then(function (res) {
			$invalidate.add('product_types');

			$location.path('/manage/product-type/' + $scope.type.id);
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('productTypeManageCtrl', ["$scope", "$store", function ($scope, $store) {
	$scope.product_types = $store.product_types;
}]);
'use strict';

angular.module('app.controllers').controller('productTypeNewCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "Product_Type", function ($scope, $stateParams, $store, $location, $invalidate, Product_Type) {
	$scope.save = function () {
		var pt = new Product_Type();

		pt.code = $scope.code;
		pt.name = $scope.name;

		pt.$save().then(function (res) {
			$invalidate.add('product_types');

			$location.path('/manage/product-type');
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('productTypeViewCtrl', ["$scope", "$stateParams", "$store", "$invalidate", "$location", "sweetAlert", function ($scope, $stateParams, $store, $invalidate, $location, sweetAlert) {
	$scope.type = $store.get('product_types', $stateParams.id);

	$scope.delete = function () {
		sweetAlert.swal({
			text: 'Are you sure you want to delete this?',
			showCancelButton: true,
			type: 'warning'
		}).then(function () {
			$scope.type.$delete().then(function () {
				$invalidate.add('product_types');

				$location.path('/manage/product-type');
			});
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('productEditCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "Product", function ($scope, $stateParams, $store, $location, $invalidate, Product) {
	$scope.product = $store.get('products', $stateParams.id);

	$scope.types = $store.product_types;
	$scope.type = $scope.product.type ? $store.get('product_types', $scope.product.type.id) : null;

	$scope.save = function () {
		$scope.product.product_type_id = $scope.type ? $scope.type.id : '';
		console.log('type id', $scope.product.type_id);

		Product.update({ id: $scope.product.id }, $scope.product).$promise.then(function (res) {
			$invalidate.add('products');

			$location.path('/manage/product/' + $scope.product.id);
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('productManageCtrl', ["$scope", "$store", function ($scope, $store) {
	$scope.products = $store.products;
}]);
'use strict';

angular.module('app.controllers').controller('productNewCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "Product", function ($scope, $stateParams, $store, $location, $invalidate, Product) {
	var type = $stateParams.type;

	$scope.types = $store.product_types;
	$scope.type = type ? $store.get('product_types', { name: type }) : null;
	$scope.name = $stateParams.name || '';

	$scope.save = function () {
		var p = new Product();

		p.name = $scope.name;
		p.product_type_id = $scope.type ? $scope.type.id : '';
		p.limitless = $scope.limitless;

		p.$save().then(function (res) {
			$invalidate.add('products');

			$location.path('/manage/product');
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('productViewCtrl', ["$scope", "$stateParams", "$state", "$store", "$location", "$invalidate", "sweetAlert", function ($scope, $stateParams, $state, $store, $location, $invalidate, sweetAlert) {
	$scope.product = $store.get('products', $stateParams.id);

	$scope.orderByUnit = function (item) {
		return parseInt(item.unit_number);
	};

	$scope.delete = function () {
		sweetAlert.swal({
			text: 'Are you sure you want to delete this?',
			showCancelButton: true,
			type: 'warning'
		}).then(function () {
			$scope.product.$delete().then(function () {
				$invalidate.add(['products', 'product_types', 'units']);

				$location.path('/manage/product');
			});
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('unitEditCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "Unit", function ($scope, $stateParams, $store, $location, $invalidate, Unit) {
	$scope.products = $store.products;

	$scope.unit = _.clone($store.get('units', $stateParams.id));
	$scope.product = $scope.unit.product ? $store.get('products', $scope.unit.product.id) : null;

	$scope.product_type = function (product) {
		return product.type ? product.type.name : '';
	};

	$scope.save = function () {
		$scope.unit.product_id = $scope.product ? $scope.product.id : '';

		Unit.update({ id: $scope.unit.id }, $scope.unit).$promise.then(function (res) {
			$invalidate.add('units');

			$location.path('/manage/unit/' + $scope.unit.id);
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('unitExportCtrl', ["$scope", "$http", function ($scope, $http) {

	$http.get('/api/export/units').then(function (res) {
		$scope.csv = res.data;
	});
}]);
'use strict';

angular.module('app.controllers').controller('unitImportCtrl', ["$scope", "$q", "$invalidate", "$store", "$location", "$csv", "$xlsx", "sweetAlert", "Unit", function ($scope, $q, $invalidate, $store, $location, $csv, $xlsx, sweetAlert, Unit) {

	$scope.units = [];
	$scope.errors = [];
	$scope.skips = [];
	$scope.loader = {};
	$scope.reloading = false;

	function getValue(cols, line, col) {
		var index = _.indexOf(cols, col);

		return line[index];
	}

	$scope.reload = function () {
		$scope.reloading = true;
		$invalidate.add('products');

		$q.all($invalidate.load()).then(function () {
			if ($scope.loader.load) $scope.loader.load();
			$scope.reloading = false;
		});
	};

	$scope.encode = function (s) {
		return encodeURIComponent(s);
	};

	$scope.$watch('units', function (newVal, oldVal) {
		$scope.calculateErrors();
	}, true);

	$scope.calculateErrors = function () {
		var errors = [];

		$scope.units.filter(function (u) {
			return u._add;
		}).forEach(function (unit) {
			if (unit._noproduct) {
				var error = _.find(errors, { message: 'Product "' + unit._noproduct + '" not found' });

				if (!error) {
					errors.push({ message: 'Product "' + unit._noproduct + '" not found', count: 1, type: 'product', product_name: unit._noproduct });
				} else {
					error.count++;
				}
			}
		});

		$scope.errors = errors;
	};

	$scope.loader.loaded = function (file, type) {
		var data;

		if (file && type == 'csv') {
			data = $csv.parse(file);
		} else if (file && type == 'xlsx') {
			data = $xlsx.parse(file);
		}

		// remove blank lines
		data = data.filter(function (r) {
			return r.unit_number !== '';
		});

		$scope.units = [];
		$scope.skips = [];

		data.forEach(function (row) {
			var unit = new Unit();

			// standard stuff
			unit.unit_number = row.unit_number;
			unit.serial_number = row.serial_number;
			unit.asset_number = row.asset_number;
			unit._add = true;

			// product stuff
			var product = $store.get('products', { name: row.product_name });

			if (product) {
				unit._product = product;
				unit.product_id = unit._product.id;

				var unitExists = product.units.find(function (u) {
					return u.unit_number == unit.unit_number || u.serial_number == unit.serial_number || u.asset_number == unit.asset_number;
				});

				if (unitExists) {

					$scope.skips.push(unit);

					return;
				}
			} else {
				unit._noproduct = row.product_name;
			}

			$scope.units.push(unit);
		});
	};

	$scope.import = function () {
		if (!$scope.units.length) return;

		if ($scope.errors.length) {
			sweetAlert.swal({
				titleText: 'Unresolved Issues',
				html: 'Do you still want to import all these units?',
				showCancelButton: true,
				cancelButtonText: "I'll fix the issues",
				confirmButtonText: "Yeah it's fine"
			}).then(go);
		} else {
			sweetAlert.swal({
				titleText: 'Good to go',
				html: 'You are about to import <b>' + $scope.units.filter(function (u) {
					return u._add;
				}).length + '</b> ' + ($scope.units.filter(function (u) {
					return u._add;
				}).length == 1 ? ' unit' : ' units'),
				showCancelButton: true,
				cancelButtonText: "Not yet",
				confirmButtonText: "Sweet let's do it"
			}).then(go);
		}

		function go() {
			var promises = $scope.units.filter(function (u) {
				return u._add;
			}).map(function (u) {
				return u.$save().$promise;
			});

			$q.all(promises).then(function (values) {
				$invalidate.add('units');
				$location.path('/manage/unit');
			});
		}
	};

	$scope.checkedUnits = function () {
		return $scope.units.filter(function (u) {
			return u._add;
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('unitManageCtrl', ["$scope", "$store", function ($scope, $store) {
	$scope.units = $store.units;

	$scope.product_id = function (u) {
		return u.product_id;
	};
	$scope.unit_number = function (u) {
		return parseInt(u.unit_number);
	};
}]);
'use strict';

angular.module('app.controllers').controller('unitNewCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "Unit", function ($scope, $stateParams, $store, $location, $invalidate, Unit) {
	$scope.products = $store.products;
	var product_id = $stateParams.product;

	$scope.product = product_id ? $store.get('products', product_id) : null;

	$scope.product_type = function (product) {
		return product.type ? product.type.name : '';
	};

	$scope.save = function () {
		var u = new Unit();

		u.serial_number = $scope.serial_number;
		u.asset_number = $scope.asset_number;
		u.unit_number = $scope.unit_number;
		u.product_id = $scope.product.id;
		u.notes = $scope.notes;

		u.$save().then(function (res) {
			$invalidate.add('units');

			$location.path('/manage/unit');
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('unitViewCtrl', ["$scope", "$stateParams", "$state", "$store", "$invalidate", "$location", "sweetAlert", function ($scope, $stateParams, $state, $store, $invalidate, $location, sweetAlert) {
	$scope.unit = $store.get('units', $stateParams.id);

	$scope.delete = function () {
		sweetAlert.swal({
			text: 'Are you sure you want to delete this?',
			showCancelButton: true,
			type: 'warning'
		}).then(function () {
			$scope.unit.$delete().then(function () {
				$invalidate.add(['units', 'products']);

				$location.path('/manage/unit');
			});
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('userEditNoteCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "Note", function ($scope, $stateParams, $store, $location, $invalidate, Note) {

	$scope.user = _.clone($store.get('users', $stateParams.id));
	// $scope.note = _.find($scope.user.notes, (note) => note.id == $stateParams.id2)
	$scope.note = $store.get('notes', $stateParams.id2);

	if (!$scope.note) $location.path('/manage/user/' + $scope.user.id);

	$scope.save = function () {
		Note.update({ id: $scope.note.id }, $scope.note).$promise.then(function () {
			$invalidate.add('notes');

			$location.path('/manage/user/' + $scope.user.id);
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('userEditCtrl', ["$scope", "$stateParams", "$state", "$store", "$location", "$invalidate", "User", function ($scope, $stateParams, $state, $store, $location, $invalidate, User) {

	$scope.roles = [{ level: 0, text: 'Student' }, { level: 1, text: 'Staff' }, { level: 2, text: 'Manager' }];

	window.$scope = $scope;

	$scope.errors = [];

	if ($state.current.data.edit_profile) {
		$scope.user = _.clone($store.user);
		$scope.profileMode = true;
	} else {
		$scope.user = _.clone($store.get('users', $stateParams.id));
		$scope.you = $store.user;
	}

	$scope.curUser = $store.user;

	if ($scope.curUser.admin < 2 && $scope.user.admin > 0 && $scope.user.id !== $scope.curUser.id) {
		$location.path('/manage/user');
	}

	if ($scope.user.admin == 1 && $scope.user.group && !$scope.user.group._isTutor($store.user.id)) {
		$location.path('/manage/user');
	}

	$scope.groups = $store.groups;

	if ($store.user.admin === 1) {
		$scope.groups = $store.user.tutors_groups;
	}

	$scope.group = $scope.user.group ? $store.get('groups', $scope.user.group.id) : null;

	$scope.role = _.find($scope.roles, function (r) {
		return r.level == $scope.user.admin;
	});

	$scope.save = function () {
		if ($scope.password !== $scope.confirm_password) {
			$scope.errors.push({
				message: 'The passwords do not match'
			});
			return;
		} else {
			$scope.user.password = $scope.password;
		}

		$scope.user.group_id = $scope.group ? $scope.group.id : '';
		$scope.user.admin = $scope.role.level;

		console.log(JSON.stringify($scope.user));

		User.update({ id: $scope.user.id }, $scope.user).$promise.then(function (res) {
			if ($store.user.admin) {
				$invalidate.add(['users', 'groups']);
			} else {
				$invalidate.add(['groups']);
			}

			$location.path('/manage/user/' + $scope.user.id);
		}, function (res) {
			$scope.errors.push({
				message: res.data.error
			});
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('userExportCtrl', ["$scope", "$http", function ($scope, $http) {

	$http.get('/api/export/users').then(function (res) {
		$scope.csv = res.data;
	});
}]);
'use strict';

angular.module('app.controllers').controller('userImportCtrl', ["$scope", "$q", "$invalidate", "$store", "$location", "$csv", "$xlsx", "sweetAlert", "User", function ($scope, $q, $invalidate, $store, $location, $csv, $xlsx, sweetAlert, User) {

	$scope.users = [];
	$scope.errors = [];
	$scope.loader = {};
	$scope.reloading = false;

	function getValue(cols, line, col) {
		var index = _.indexOf(cols, col);

		return line[index];
	}

	$scope.reload = function () {
		$scope.reloading = true;
		$invalidate.add('groups');

		$q.all($invalidate.load()).then(function () {
			if ($scope.loader.load) $scope.loader.load();
			$scope.reloading = false;
		});
	};

	$scope.$watch('users', function (newVal, oldVal) {
		$scope.calculateErrors();
	}, true);

	$scope.calculateErrors = function () {
		var errors = [];

		$scope.users.filter(function (u) {
			return u._add;
		}).forEach(function (user) {
			if (user._nogroup) {
				var error = _.find(errors, { message: 'Class "' + user._nogroup + '" not found' });

				if (!error) {
					errors.push({ message: 'Class "' + user._nogroup + '" not found', count: 1, type: 'group', group_code: user._nogroup });
				} else {
					error.count++;
				}
			}
		});

		$scope.errors = errors;
	};

	$scope.loader.loaded = function (file, type) {
		var data;

		if (file && type == 'csv') {
			data = $csv.parse(file);
		} else if (file && type == 'xlsx') {
			data = $xlsx.parse(file);
		}

		$scope.users = [];

		data.forEach(function (row) {
			var user = new User();

			// standard stuff
			if (row['Full Name']) {
				user.name = row['Full Name'];
			} else {
				user.name = row['Preferred Name (Student) (Contact)'] + ' ' + row['Last Name (Student) (Contact)'];
			}

			user.email = row['Email (Student) (Contact)'];
			user.phone = row['Mobile Phone (Student) (Contact)'];
			user.id_number = row['Take2 ID (Student) (Contact)'];
			user.password = 'Yoobee01';
			user._add = true;

			if (row.Admin) {
				user.admin = row.Admin;
			}

			// date stuff
			var date = row['Date of Birth - New (Student) (Contact)'];

			if (type == 'xlsx') {
				console.log('date', date);
				if (date.indexOf('/') !== -1) {
					user.dob = moment(date, 'MM-DD-YYYY')._d;
				} else {
					date = XLSX.SSF.parse_date_code(date);
					user.dob = new Date([date.y, date.m, date.d].join('-'));
				}
			} else {
				console.log('date', date);
				user.dob = moment(date, 'DD-MM-YYYY')._d;
			}

			// group stuff
			var group = $store.get('groups', { code: row.Intake });

			if (group) {
				user._group = group;
				user.group_id = user._group.id;
			} else {
				user._nogroup = row.Intake;
			}

			$scope.users.push(user);
		});
	};

	$scope.import = function () {
		if (!$scope.users.length) return;

		if ($scope.errors.length) {
			sweetAlert.swal({
				titleText: 'Unresolved Issues',
				html: 'Do you still want to import all these users?',
				showCancelButton: true,
				cancelButtonText: "I'll fix the issues",
				confirmButtonText: "Yeah it's fine"
			}).then(go);
		} else {
			sweetAlert.swal({
				titleText: 'Good to go',
				html: 'You are about to import <b>' + $scope.users.filter(function (u) {
					return u._add;
				}).length + '</b> ' + ($scope.users.filter(function (u) {
					return u._add;
				}).length == 1 ? ' user' : ' users'),
				showCancelButton: true,
				cancelButtonText: "Not yet",
				confirmButtonText: "Sweet let's do it"
			}).then(go);
		}

		function go() {
			var promises = $scope.users.filter(function (u) {
				return u._add;
			}).map(function (u) {
				return u.$save().$promise;
			});

			$q.all(promises).then(function (values) {
				$invalidate.add('users');
				$location.path('/manage/user');
			});
		}
	};

	$scope.checkedUsers = function () {
		return $scope.users.filter(function (u) {
			return u._add;
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('userManageCtrl', ["$scope", "$store", "$location", function ($scope, $store, $location) {
	$scope.users = $store.users;

	// $scope.staffFilter = function(value, index, array) {
	// 	if($store.user.admin == 2) {
	// 		return true
	// 	}

	// 	return value.group && value.group._isTutor($store.user.id)
	// }
}]);
'use strict';

angular.module('app.controllers').controller('userNewNoteCtrl', ["$scope", "$stateParams", "$store", "$location", "$invalidate", "User", "Note", function ($scope, $stateParams, $store, $location, $invalidate, User, Note) {

	$scope.content = '';
	$scope.user = _.clone($store.get('users', $stateParams.id));

	$scope.save = function () {
		var n = new Note();

		n.content = $scope.content;
		n.user_id = $scope.user.id;

		n.$save().then(function (res) {
			$invalidate.add('notes');

			$location.path('/manage/user/' + $scope.user.id);
		}).catch(function (res) {
			console.log('save err', res);
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('userNewCtrl', ["$scope", "$stateParams", "$store", "$location", "$auth", "$invalidate", "User", function ($scope, $stateParams, $store, $location, $auth, $invalidate, User) {
	var group = $stateParams['class'];

	$scope.roles = [{ level: 0, text: 'Student' }, { level: 1, text: 'Staff' }, { level: 2, text: 'Manager' }];

	$scope.groups = $store.groups;
	$scope.user = $store.user;
	$scope.errors = [];

	if ($store.user.admin === 1) {
		$scope.groups = $store.user.tutors_groups;
	}

	$scope.group = $stateParams['class'] ? $store.get('groups', { code: group }) : null;
	$scope.role = $scope.roles[0];

	$scope.save = function () {
		if ($scope.password !== $scope.confirm_password) {
			$scope.errors.push({
				message: 'The passwords do not match'
			});
			return;
		}

		if (!$scope.password) {
			$scope.errors.push({
				message: 'You need to set a password'
			});
			return;
		}

		var u = new User();

		u.dob = $scope.dob;
		u.name = $scope.name;
		u.email = $scope.email;
		u.phone = $scope.phone;
		u.group_id = $scope.group ? $scope.group.id : '';
		u.password = $scope.password;
		u.id_number = $scope.id_number;
		u.admin = $scope.role ? $scope.role.level : 0;

		u.$save().then(function (res) {
			$invalidate.add(['groups', 'users']);

			$location.path('/manage/user');
		}).catch(function (res) {
			console.log('save err', res);
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('userViewNoteCtrl', ["$scope", "$stateParams", "$store", "$invalidate", "$location", "Note", "sweetAlert", function ($scope, $stateParams, $store, $invalidate, $location, Note, sweetAlert) {

	$scope.user = _.clone($store.get('users', $stateParams.id));
	$scope.note = $store.get('notes', $stateParams.id2);

	$scope.notes = $store.notes;

	$scope.dateify = function (str) {
		return new Date(str);
	};

	$scope.deleteNote = function (note) {
		sweetAlert.swal({
			text: 'Are you sure you want to delete this?',
			showCancelButton: true,
			type: 'warning'
		}).then(function () {
			Note.delete({ id: note.id }).$promise.then(function () {
				$invalidate.add('notes');
				$location.path('/manage/user/' + $scope.user.id);
			});
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('userViewCtrl', ["$scope", "$stateParams", "$store", "$invalidate", "$location", "Note", "User", "sweetAlert", function ($scope, $stateParams, $store, $invalidate, $location, Note, User, sweetAlert) {
	$scope.user = $store.get('users', $stateParams.id);
	$scope.you = $store.user;

	if ($scope.user.admin == 1 && $scope.user.group && !$scope.user.group._isTutor($store.user.id)) {
		$location.path('/manage/user');
	}

	$scope.filterOutRevisions = function (note) {
		var isOld = false;

		_.forEach($scope.user.notes, function (n) {
			if (note.id == n.revision_of) isOld = true;
		});

		return isOld;
	};

	$scope.delete = function () {
		sweetAlert.swal({
			text: 'Are you sure you want to delete this?',
			showCancelButton: true,
			type: 'warning'
		}).then(function () {
			$scope.user.$delete().then(function () {
				$invalidate.add(['users', 'groups', 'bookings']);

				$location.path('/manage/user');
			});
		});
	};

	$scope.deleteNote = function (note) {
		sweetAlert.swal({
			text: 'Are you sure you want to delete that note?',
			showCancelButton: true,
			type: 'warning'
		}).then(function () {
			Note.delete({ id: note.id }).$promise.then(function () {
				$store.notes = _.reject($scope.user.notes, function (n) {
					return n.id == note.id;
				});
			});
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('homeCtrl', ["$scope", "$store", "$load", "$prepare", "$stateParams", "$timeout", "Booking", function ($scope, $store, $load, $prepare, $stateParams, $timeout, Booking) {
	$scope.user = $store.user;
	$scope.bookings = [];
	$scope.loading = true;

	$scope.bookings = Booking.query({ user_id: $store.user.id });

	$scope.bookings.$promise.then($prepare.bookings).then(function (res) {
		return $scope.loading = false;
	});

	// --------------------------------------------------------------------------------
	// Dates
	// --------------------------------------------------------------------------------

	$scope.timediff = function (date, unit) {
		return moment().startOf('day').diff(moment(date).startOf('day'), unit) * -1;
	};

	$scope.diff = function (date) {
		return $scope.timediff(date, 'days');
	};

	$scope.days = function (num) {
		return num == 1 ? 'day' : 'days';
	};
}]);
'use strict';

angular.module('app.controllers').controller('loginCtrl', ["$scope", "$auth", "$store", "$state", "$location", "$invalidate", "$load", "User", function ($scope, $auth, $store, $state, $location, $invalidate, $load, User) {
	$scope.$watch('email', reset);
	$scope.$watch('password', reset);

	function reset() {
		$scope.error = '';
	}

	$scope.login = function () {
		if (!$scope.email || !$scope.password) {
			return false;
		}

		var credentials = {
			email: $scope.email,
			password: $scope.password
		};

		$auth.login(credentials).then(function (res) {
			$store.user = new User(res.data.user);

			$load.trigger('user', $store.user);

			$invalidate.all();

			$location.path('/home');
		}).catch(function (res) {
			console.log(res.data);
			if (res.data.error == 'invalid_credentials') {
				$scope.error = 'Email or password is invalid.';
			} else {
				$scope.error = 'Unknown error';
			}
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('resetCtrl', ["$scope", "$http", function ($scope, $http) {

	$scope.submit = function () {
		$http.post('/password/email', {
			email: $scope.email
		}).then(function (res) {
			$scope.message = 'Password Reset email sent. Please check your inbox.';
		});
	};
}]);
'use strict';

angular.module('app.controllers').controller('siteSettingsCtrl', ["$scope", "$store", "$q", "Setting", function ($scope, $store, $q, Setting) {

	$scope.tinymceOptions = {
		baseURL: '/components/tinymce/',
		menubar: false,
		statusbar: false,
		plugins: 'lists',
		toolbar: 'formatselect | bold italic underline | alignleft aligncenter alignright | bullist numlist'
	};

	$scope.settings = $store.settings;
	$scope.thinking = false;
	$scope.saved = false;

	$scope.$watch('settings', function (newVal) {
		$scope.saved = false;
	}, true);

	$scope.save = function () {
		var promises = [];
		$scope.thinking = true;

		$scope.settings.forEach(function (setting) {
			var promise = Setting.update({ id: setting.id }, setting).$promise;

			promise.then(function (res) {
				console.log(res);
			});

			promises.push(promise);
		});

		$q.all(promises).then(function () {
			$scope.thinking = false;
			$scope.saved = true;
			console.log('all saved');
		});
	};
}]);
'use strict';

// based on http://codepen.io/juliangarnier/pen/gmOwJX

Mousetrap.bindGlobal(['up up down down left right left right b a'], function () {
	window.konami = true;
	document.body.classList.add('konami-code');
	return false;
});

$(document).on('click', function (event) {
	if (window.konami) {
		if (event.clientX && event.clientY) {
			explode(event);
		}
	}
});

function explode(e) {
	var x = e.pageX;
	var y = e.pageY;
	var c = document.createElement('canvas');
	var ctx = c.getContext('2d');
	var ratio = window.devicePixelRatio;
	var particles = [];
	var rings = [];
	var colors = ['#FF1461', '#18FF92', '#5A87FF', '#FBF38C'];

	var options = {
		numParticles: 30,
		scale: 1,
		radiusMin: 60,
		radiusMax: 100,
		speedMin: 8,
		speedMax: 16,
		accel: 0.95,
		ringFade: 0.03,
		ringAccel: 20,
		ringAccelShrink: 0.8,
		ringMinAccel: 0.6,
		ringWidth: 1,
		gravity: 0
	};

	document.body.appendChild(c);

	var w = 600;
	var h = 600;

	c.style.position = 'absolute';
	c.style.left = x - w / 2 + 'px';
	c.style.top = y - h / 2 + 'px';
	c.style.pointerEvents = 'none';
	c.style.width = w + 'px';
	c.style.height = h + 'px';
	c.style.zIndex = 9999;
	c.width = w * ratio;
	c.height = h * ratio;

	for (var i = 0; ++i < options.numParticles + 1;) {
		particles.push({
			x: c.width / 2,
			y: c.height / 2,
			radius: r(options.radiusMin * options.scale, options.radiusMax * options.scale),
			color: colors[parseInt(Math.random() * colors.length)],
			rotation: r(0, 360, true),
			speed: r(options.speedMin * options.scale, options.speedMax * options.scale),
			yVel: 0,
			gravity: options.gravity * options.scale,
			accel: options.accel,
			shrink: 0.875
		});
	}

	rings.push({
		x: c.width / 2,
		y: c.height / 2,
		radius: 0,
		accel: options.ringAccel * options.scale,
		alpha: 1
	});

	function render() {
		ctx.clearRect(0, 0, c.width, c.height);

		rings.forEach(function (ring, i) {
			ring.radius += ring.accel;

			ring.accel -= options.ringAccelShrink * options.scale;

			if (ring.accel < options.ringMinAccel) ring.accel = options.ringMinAccel;

			ring.alpha -= options.ringFade;

			ctx.strokeStyle = 'rgba(0, 0, 0, ' + ring.alpha + ')';
			ctx.lineWidth = options.ringWidth * options.scale;

			ctx.beginPath();
			ctx.arc(ring.x, ring.y, ring.radius, 0, 2 * Math.PI, false);
			ctx.stroke();
		});

		particles.forEach(function (p, i) {
			p.radius *= p.shrink;

			if (p.radius < 0) return;

			var step = at.step(p.rotation, p.speed);

			p.x += step.x;
			p.y += step.y;

			p.speed *= p.accel;

			p.yVel += p.gravity;
			p.y += p.yVel;

			ctx.beginPath();
			ctx.fillStyle = p.color;
			ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, false);
			ctx.fill();
		});
	}

	;(function renderLoop() {
		requestAnimationFrame(renderLoop);
		render();
	})();

	setTimeout(function () {
		document.body.removeChild(c);
	}, 1000);
}

var at = {
	angle: function angle(a, b) {
		return Math.atan2(b.y - a.y, b.x - a.x) / Math.PI * 180;
	},
	dist: function dist(a, b) {
		return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
	},
	step: function step(a, s) {
		return { x: s * Math.cos(a * Math.PI / 180), y: s * Math.sin(a * Math.PI / 180) };
	}
};

function r(a, b, c) {
	return parseFloat((Math.random() * ((a ? a : 1) - (b ? b : 0)) + (b ? b : 0)).toFixed(c ? c : 0));
}
'use strict';

angular.module('app.resources').factory('Booking', ["$resource", function ($resource) {
	var url = '/api/booking/:id';

	var defaults = {
		'id': '@id'
	};

	var methods = {
		update: {
			method: 'PUT'
		}
	};

	return $resource(url, defaults, methods);
}]);
'use strict';

angular.module('app.resources').factory('Group_Type', ["$resource", function ($resource) {
	var url = '/api/group_type/:id';

	var defaults = {
		'id': '@id'
	};

	var methods = {
		update: {
			method: 'PUT'
		}
	};

	return $resource(url, defaults, methods);
}]);
'use strict';

angular.module('app.resources').factory('Group', ["$resource", function ($resource) {
	var url = '/api/group/:id';

	var defaults = {
		'id': '@id'
	};

	var methods = {
		update: {
			method: 'PUT'
		}
	};

	return $resource(url, defaults, methods);
}]);
'use strict';

angular.module('app.resources').factory('Note', ["$resource", function ($resource) {
	var url = '/api/note/:id';

	var defaults = {
		'id': '@id'
	};

	var methods = {
		update: {
			method: 'PUT'
		}
	};

	return $resource(url, defaults, methods);
}]);
'use strict';

angular.module('app.resources').factory('Product_Type', ["$resource", function ($resource) {
	var url = '/api/product_type/:id';

	var defaults = {
		'id': '@id'
	};

	var methods = {
		update: {
			method: 'PUT'
		}
	};

	return $resource(url, defaults, methods);
}]);
'use strict';

angular.module('app.resources').factory('Product', ["$resource", function ($resource) {
	var url = '/api/product/:id';

	var defaults = {
		'id': '@id'
	};

	var methods = {
		update: {
			method: 'PUT'
		}
	};

	return $resource(url, defaults, methods);
}]);
'use strict';

angular.module('app.resources').factory('Setting', ["$resource", function ($resource) {
	var url = '/api/setting/:id';

	var defaults = {
		'id': '@id'
	};

	var methods = {
		update: {
			method: 'PUT'
		}
	};

	return $resource(url, defaults, methods);
}]);
'use strict';

angular.module('app.resources').factory('Unit', ["$resource", function ($resource) {
	var url = '/api/unit/:id';

	var defaults = {
		'id': '@id'
	};

	var methods = {
		update: {
			method: 'PUT'
		}
	};

	return $resource(url, defaults, methods);
}]);
'use strict';

angular.module('app.resources').factory('User', ["$resource", function ($resource) {
	var url = '/api/user/:id';

	var defaults = {
		'id': '@id'
	};

	var methods = {
		update: {
			method: 'PUT'
		},
		getWithToken: {
			method: 'GET',
			url: '/api/auth',
			params: { with: 'tutors_groups.type' }
		}
	};

	return $resource(url, defaults, methods);
}]);
'use strict';

angular.module('app.services').factory('$csv', function () {
	function CSVToArray(strData, strDelimiter) {
		// Check to see if the delimiter is defined. If not,
		// then default to comma.
		strDelimiter = strDelimiter || ",";

		// Create a regular expression to parse the CSV values.
		var objPattern = new RegExp(
		// Delimiters.
		"(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +

		// Quoted fields.
		"(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

		// Standard fields.
		"([^\"\\" + strDelimiter + "\\r\\n]*))", "gi");

		// Create an array to hold our data. Give the array
		// a default empty first row.
		var arrData = [[]];

		// Create an array to hold our individual pattern
		// matching groups.
		var arrMatches = null;

		// Keep looping over the regular expression matches
		// until we can no longer find a match.
		while (arrMatches = objPattern.exec(strData)) {

			// Get the delimiter that was found.
			var strMatchedDelimiter = arrMatches[1];

			// Check to see if the given delimiter has a length
			// (is not the start of string) and if it matches
			// field delimiter. If id does not, then we know
			// that this delimiter is a row delimiter.
			if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {

				// Since we have reached a new row of data,
				// add an empty row to our data array.
				arrData.push([]);
			}

			var strMatchedValue;

			// Now that we have our delimiter out of the way,
			// let's check to see which kind of value we
			// captured (quoted or unquoted).
			if (arrMatches[2]) {

				// We found a quoted value. When we capture
				// this value, unescape any double quotes.
				strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
			} else {

				// We found a non-quoted value.
				strMatchedValue = arrMatches[3];
			}

			// Now that we have our value string, let's add
			// it to the data array.
			arrData[arrData.length - 1].push(strMatchedValue);
		}

		// Return the parsed data.
		return arrData;
	}

	var service = {
		parse: function parse(text) {
			var arr = CSVToArray(text);

			var cols = arr.shift();

			var rows = arr.map(function (row) {
				var obj = {};

				cols.forEach(function (col, i) {
					obj[col] = row[i];
				});

				return obj;
			});

			return rows;
		}
	};

	return service;
});
'use strict';

angular.module('app.services').factory('$invalidate', ["$rootScope", "$auth", "$store", "$interval", "$load", function ($rootScope, $auth, $store, $interval, $load) {
	var service = {
		invalidated: []
	};

	service.add = function (type) {
		if (type instanceof Array) {
			_.forEach(type, function (t) {
				if (service.invalidated.indexOf(t) === -1) {
					service.invalidated.push(t);
				}
			});
		} else {
			service.invalidated.push(type);
		}
	};

	service.all = function () {
		if ($auth.getPayload() && $auth.getPayload().admin) {
			// if logged in as admin
			service.add(['user', 'users', 'groups', 'group_types', 'product_types', 'products', 'units', 'notes', 'booking_count', 'settings']);
		} else {
			// if not logged in, or logged in as student
			service.add(['user', 'groups', 'products', 'units', 'settings']);
		}
	};

	service.except = function (types) {
		service.all();

		types.forEach(function (type) {
			service.invalidated = _.reject(service.invalidated, function (t) {
				return t == type;
			});
		});
	};

	service.load = function () {
		var invalid = [];

		_.forEach(service.invalidated, function (i) {
			var thing;

			switch (i) {
				case 'user':
					thing = $load.user();
					$store.user = thing;
					invalid.push(thing.$promise);
					break;
				case 'users':
					thing = $load.users();
					$store.users = thing;
					invalid.push(thing.$promise);
					break;
				case 'units':
					thing = $load.units();
					$store.units = thing;
					invalid.push(thing.$promise);
					break;
				case 'groups':
					thing = $load.groups();
					$store.groups = thing;
					invalid.push(thing.$promise);
					break;
				case 'products':
					thing = $load.products();
					$store.products = thing;
					invalid.push(thing.$promise);
					break;
				case 'bookings':
					thing = $load.bookings();
					$store.bookings = thing;
					invalid.push(thing.$promise);
					break;
				case 'group_types':
					thing = $load.group_types();
					$store.group_types = thing;
					invalid.push(thing.$promise);
					break;
				case 'product_types':
					thing = $load.product_types();
					$store.product_types = thing;
					invalid.push(thing.$promise);
					break;
				case 'notes':
					thing = $load.notes();
					$store.notes = thing;
					invalid.push(thing.$promise);
					break;
				case 'booking_count':
					thing = $load.booking_count();
					thing.then(function (res) {
						return $store.notes = res.data.total;
					});
					invalid.push(thing);
					break;
				case 'settings':
					thing = $load.settings();
					$store.settings = thing;
					invalid.push(thing.$promise);
					break;
			}
		});

		service.invalidated = [];

		return invalid;
	};

	service.add(['groups']);

	if ($auth.isAuthenticated()) {
		service.all();
	}

	// invalidate everything every 5 minutes
	$interval(function () {
		service.all();
	}, 5 * 60 * 1000);

	return service;
}]);
'use strict';

angular.module('app.services').factory('$load', ["$prepare", "$auth", "$http", "User", "Group", "Group_Type", "Product_Type", "Product", "Unit", "Booking", "Note", "Setting", function ($prepare, $auth, $http, User, Group, Group_Type, Product_Type, Product, Unit, Booking, Note, Setting) {
	var service = {};
	var events = [];

	service.user = function () {
		var resource = User.getWithToken();

		resource.$promise.then($prepare.user).then(service.notify('user'));

		return resource;
	};

	service.users = function () {
		var resource = User.query({ 'with': 'tutors_groups.type' });

		resource.$promise.then($prepare.users).then(service.notify('users'));

		return resource;
	};

	service.group_types = function () {
		var resource = Group_Type.query();

		resource.$promise.then($prepare.group_types).then(service.notify('group_types'));

		return resource;
	};

	service.groups = function () {
		var query = { 'with': 'allowed_products.type' };

		if ($auth.getPayload() && $auth.getPayload().admin) {
			query.with = 'allowed_products|tutors';
		}

		var resource = Group.query(query);

		resource.$promise.then($prepare.groups).then(service.notify('groups'));

		return resource;
	};

	service.product_types = function () {
		var resource = Product_Type.query();

		resource.$promise.then($prepare.product_types).then(service.notify('product_types'));

		return resource;
	};

	service.products = function () {
		var resource = Product.query({ 'with': 'groups_allowed' });

		resource.$promise.then($prepare.products).then(service.notify('products'));

		return resource;
	};

	service.units = function () {
		var resource = Unit.query();

		resource.$promise.then($prepare.units).then(service.notify('units'));

		return resource;
	};

	service.booking = function (id) {
		var resource = Booking.get({ id: id, 'with': 'products' });

		resource.$promise.then($prepare.booking).then(service.notify('bookings'));

		return resource;
	};

	service.bookings = function (limit, page) {
		var resource = Booking.query({ limit: limit, page: page, 'with': 'products' });

		resource.$promise.then($prepare.bookings).then(service.notify('bookings'));

		return resource;
	};

	service.notes = function () {
		var resource = Note.query({});

		resource.$promise.then($prepare.notes).then(service.notify('notes'));

		return resource;
	};

	service.booking_count = function () {
		var resource = $http.get('/api/booking/count');

		resource.then(service.notify('booking_count'));

		return resource;
	};

	service.settings = function () {
		var resource = Setting.query();

		resource.$promise.then(service.notify('settings'));

		return resource;
	};

	service.listen = function (event, callback) {
		events.push({
			name: event,
			callback: callback
		});
	};

	service.notify = function (eventName) {
		return function (resource) {
			return service.trigger(eventName, resource);
		};
	};

	service.trigger = function (eventName, data) {
		_.forEach(events, function (event) {
			if (event.name == eventName) {
				event.callback(data);
			}
		});
	};

	return service;
}]);
'use strict';

angular.module('app.services').factory('$merge', ["$store", function ($store) {
	var service = {};

	service.bookings = function (newBookings) {
		newBookings.forEach(function (booking) {
			if (!_.find($store.bookings, { id: booking.id })) {
				$store.bookings.push(booking);
			}
		});

		// sort by id
		$store.bookings.sort(function (a, b) {
			return a.id - b.id;
		});
	};

	return service;
}]);
'use strict';

angular.module('app.services').factory('$message', function () {
	var service = {};

	service.data = {};

	service.set = function (name, val) {
		return service.data[name] = val;
	};

	service.get = function (name) {
		return service.data[name];
	};

	service.flash = function (name) {
		var val = service.data[name];

		if (val) {
			delete service.data[name];
			return val;
		} else {
			return undefined;
		}
	};

	return service;
});
'use strict';

angular.module('app.services')

/**
*	This service's job is to take an object, or array of objects, and decorate them.
*	Some of that includes adding custom properties, which we prepend with an underscore.
*	eg.
*		user._age
*
*	But it also adds getters to the objects, so that we may link objects to one another.
*	eg.
*		We want to be able to use the following syntax to get the groups code: user.group.code
*		To do that we add a getter that searches all the groups for one that has the same id as the
*		user's group_id value, and returns that object.
*
*	Some getters have enumerable: true, which means any filters will be able to view the data of the
*	linked objects. For example, viewing all users, you may filter by group code, because the
*	user.group getter is enumerable.
*
*	Be careful with this, as you can end up with infinite loops if two objects reference eachother
*	with getters and both have enumerable: true
*
*	See: http://javascriptplayground.com/blog/2013/12/es5-getters-setters/
**/

.factory('$prepare', ["$store", function ($store) {
	var service = {};

	var enumerable = true;
	var configurable = true;

	service.users = function (users) {
		_.forEach(users, service.user);

		return users;
	};

	service.user = function (user) {
		if (user.admin === 2) user._role = 'Manager';
		if (user.admin === 1) user._role = 'Staff';
		if (user.admin === 0) user._role = 'Student';

		var duration = moment.duration(moment().diff(moment(user.dob)));

		user._age = duration.asYears().toFixed(0);

		if (user.dob) user.dob = new Date(user.dob);

		Object.defineProperty(user, 'group', {
			enumerable: enumerable,
			configurable: configurable,
			get: function get() {
				return _.find($store.groups, { id: user.group_id });
			}
		});

		Object.defineProperty(user, 'bookings', {
			get: function get() {
				return _.filter($store.bookings, { user_id: user.id });
			}
		});

		Object.defineProperty(user, 'notes', {
			get: function get() {
				return _.filter($store.notes, { user_id: user.id });
			}
		});

		return user;
	};

	service.groups = function (groups) {
		_.forEach(groups, function (group) {

			Object.defineProperty(group, 'type', {
				enumerable: enumerable,
				configurable: configurable,
				get: function get() {
					return _.find($store.group_types, { id: group.group_type_id });
				}
			});

			Object.defineProperty(group, 'users', {
				get: function get() {
					return _.filter($store.users, { group_id: group.id });
				}
			});

			group._isTutor = function (id) {
				return !!_.find(group.tutors, { id: $store.user.id });
			};
		});

		return groups;
	};

	service.group_types = function (group_types) {
		_.forEach(group_types, function (type) {

			Object.defineProperty(type, 'groups', {
				get: function get() {
					return _.filter($store.groups, { group_type_id: type.id });
				}
			});
		});

		return group_types;
	};

	service.products = function (products) {
		_.forEach(products, function (product) {
			product._quantity = '';

			Object.defineProperty(product, 'type', {
				enumerable: enumerable,
				configurable: configurable,
				get: function get() {
					return _.find($store.product_types, { id: product.product_type_id });
				}
			});

			Object.defineProperty(product, 'units', {
				get: function get() {
					return _.filter($store.units, { product_id: product.id });
				}
			});
		});

		return products;
	};

	service.product_types = function (product_types) {
		_.forEach(product_types, function (type) {

			Object.defineProperty(type, 'products', {
				get: function get() {
					return _.filter($store.products, { product_type_id: type.id });
				}
			});
		});

		return product_types;
	};

	service.units = function (units) {
		_.forEach(units, function (unit) {

			Object.defineProperty(unit, 'product', {
				enumerable: enumerable,
				configurable: configurable,
				get: function get() {
					return _.find($store.products, { id: unit.product_id });
				}
			});
		});

		return units;
	};

	service.booking = function (booking) {
		function transformDate(originalDate) {
			// Transform date string into what looks like an ISO string
			var iso = originalDate.replace(' ', 'T').concat('.000Z');

			// Transform that into a unix timestamp
			var unix = moment(originalDate).add(moment().utcOffset(), 'minutes').format('x');

			// Return a date object based on the timestamp
			return new Date(parseInt(unix));
		}

		if (booking.created_at) booking.created_at = transformDate(booking.created_at);
		if (booking.due_at) booking.due_at = transformDate(booking.due_at);
		if (booking.pickup_at) booking.pickup_at = transformDate(booking.pickup_at);
		if (booking.taken_at) booking.taken_at = transformDate(booking.taken_at);
		if (booking.closed_at) booking.closed_at = transformDate(booking.closed_at);
		if (booking.cancelled_at) booking.cancelled_at = transformDate(booking.cancelled_at);

		// low is top of table
		booking._priority = 0;

		if (!booking.taken_at) {
			booking._priority = 1;
			booking._status = 'Booked';
		}

		if (booking.taken_at && !booking.returned_at) {
			booking._priority = 2;
			booking._status = 'Issued';

			if (booking.due_at.valueOf() < new Date().valueOf()) {
				booking._overdue = true;
				booking._timeoverdue = moment().diff(booking.due_at, 'days');
			}
		}

		if (booking.closed_at) {
			booking._priority = 3;
			booking._status = 'Closed';
		}

		if (booking.cancelled_at) {
			booking._priority = 4;
			booking._status = 'Cancelled';
		}

		_.forEach(booking.products, function (product) {
			if (product.pivot.returned_at) product.pivot.returned_at = new Date(product.pivot.returned_at);
		});

		if (!booking.user) {
			Object.defineProperty(booking, 'user', {
				enumerable: enumerable,
				configurable: configurable,
				get: function get() {
					return _.find($store.users, { id: booking.user_id });
				}
			});
		}

		Object.defineProperty(booking, 'created_by', {
			get: function get() {
				return _.find($store.users, { id: booking.created_by_id });
			}
		});

		Object.defineProperty(booking, 'issued_by', {
			get: function get() {
				return _.find($store.users, { id: booking.issued_by_id });
			}
		});

		Object.defineProperty(booking, 'closed_by', {
			get: function get() {
				return _.find($store.users, { id: booking.closed_by_id });
			}
		});

		Object.defineProperty(booking, '_products', {
			get: function get() {
				var products = [];

				_.forEach(booking.products, function (product) {
					products.push(_.find($store.products, { id: product.id }));
				});

				return products;
			}
		});

		return booking;
	};

	service.bookings = function (bookings) {
		_.forEach(bookings, service.booking);

		return bookings;
	};

	service.notes = function (notes) {
		_.forEach(notes, function (note) {

			Object.defineProperty(note, 'history', {
				enumerable: enumerable,
				configurable: configurable,
				get: function get() {
					function getParent(a, n) {
						if (n.revision_of) {
							var parent = _.find($store.notes, { id: n.revision_of });

							a.push(parent);

							return getParent(a, parent);
						} else {
							return a;
						}
					}

					return _.sortBy(getParent([], note), function (note) {
						return -new Date(note.created_at).valueOf();
					});
				}
			});

			Object.defineProperty(note, 'user', {
				get: function get() {
					return _.find($store.users, { id: note.user_id });
				}
			});

			Object.defineProperty(note, 'writer', {
				get: function get() {
					return _.find($store.users, { id: note.writer_id });
				}
			});
		});

		return notes;
	};

	return service;
}]);
'use strict';

angular.module('app.services').factory('$pretend', ["$q", "$timeout", function ($q, $timeout) {
	var service = {
		wait: function wait(time) {
			return $q(function (resolve, reject) {
				$timeout(function () {
					resolve();
				}, time);
			});
		}
	};

	return service;
}]);
'use strict';

angular.module('app.services').factory('$queryString', ["$store", function ($store) {

	var service = function service(obj, begin) {
		var str = '';

		for (var prop in obj) {
			var val = obj[prop];

			if (val === false || val === '' || val === undefined || val === null) continue;
			if (prop === 'page' && val === 1) continue;

			if (val === true) val = 'true';
			if (val instanceof Date) val = val.valueOf();

			str += prop + '=' + val + '&';
		}

		return str.length ? (begin ? '?' : '') + str.substring(0, str.length - 1) : '';
	};

	return service;
}]);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

angular.module('app.services').factory('$store', ["Booking", function (Booking) {
	var service = {
		user: {},
		units: [],
		users: [],
		notes: [],
		groups: [],
		booking: {},
		settings: [],
		products: [],
		bookings: [],
		group_types: [],
		product_types: [],
		booking_count: 0
	};

	window.$store = service;

	service.setBooking = function (booking) {
		localStorage.booking = JSON.stringify(booking);
		service.booking = booking;
	};

	service.resetBooking = function () {
		localStorage.removeItem('booking');
		service.booking = {};
	};

	service.clear = function (things) {
		if (things instanceof Array) {
			_.forEach(things, function (thing) {
				service[thing] = {};
			});
		} else {
			service[things] = {};
		}
	};

	service.get = function (type, id) {
		var item = _.find(service[type], (typeof id === 'undefined' ? 'undefined' : _typeof(id)) == 'object' && id !== null ? id : { id: parseInt(id) });

		return item;
	};

	service.filter = function (type, expression) {
		var items = _.filter(service[type], (typeof expression === 'undefined' ? 'undefined' : _typeof(expression)) == 'object' && expression !== null ? expression : expression());

		return items;
	};

	if (localStorage.booking) {
		service.booking = JSON.parse(localStorage.booking);

		if (service.booking.pickup_at) {
			service.booking.pickup_at = new Date(service.booking.pickup_at);
		}

		if (service.booking.due_at) {
			service.booking.due_at = new Date(service.booking.due_at);
		}
	}

	return service;
}]);
'use strict';

angular.module('app.services').factory('$title', ["$rootScope", function ($rootScope) {
	var service = function service(title) {
		$rootScope.pageTitle = title + ' - Booking';
	};

	return service;
}]);
'use strict';

angular.module('app.services').factory('$xlsx', function () {
	var service = {
		parse: function parse(binaryData) {
			var workbook = XLSX.read(binaryData, { type: 'binary', cellDates: true });
			var worksheet = workbook.Sheets[workbook.SheetNames[0]];
			return XLSX.utils.sheet_to_json(worksheet);
		}
	};

	return service;
});
"use strict";

//jscs:disable
angular.module("app.views").run(["$templateCache", function ($templateCache) {
  $templateCache.put("directives/alert/alert.html", "<div class=\"alert alert-{{ type }}\"><p layout=\"row\" align=\"center\" justify=\"between\"><span><i class=\"fa fa-fw fa-{{ icon }}\" ng-if=\"icon\"></i><span ng-bind-html=\"text\"></span></span><ng-transclude></ng-transclude></p></div>");
  $templateCache.put("directives/btn/btn.html", "<span><button type=\"button\" ng-show=\"!url\" class=\"btn btn-{{ type }} btn-sm\" ng-class=\"{\'btn-sm\': small,\'btn-large\': large,\'btn-circle\': circle,\'btn-icon\': icon && hasTranscluded}\" ng-disabled=\"disable\"><i class=\"fa fa-fw fa-{{ icon }}\" ng-class=\"{\'fa-spin\': spin}\" ng-show=\"icon\"></i><ng-transclude></ng-transclude></button><a href=\"{{ url }}\" ng-show=\"url\" class=\"btn btn-{{ type }} btn-sm\" ng-class=\"{\'btn-sm\': small,\'btn-large\': large,\'btn-circle\': circle,\'btn-icon\': icon && hasTranscluded}\" ng-disabled=\"disable\"><i class=\"fa fa-fw fa-{{ icon }}\" ng-class=\"{\'fa-spin\': spin}\" ng-show=\"icon\"></i><ng-transclude></ng-transclude></a></span>");
  $templateCache.put("directives/breadcrumbs/breadcrumbs.html", "<div class=\"breadcrumbs\"><ul layout=\"row\"><li ng-repeat=\"crumb in crumbs\" layout=\"row\"><a href=\"{{ fix(crumb.url) }}\"> {{ crumb.data.title }}</a></li><li><span>{{ state.current.data.title }}</span></li></ul></div>");
  $templateCache.put("directives/date-input/date-input.html", "<div class=\"date-input\"><input type=\"text\" ng-model=\"model\" ng-change=\"change()\" class=\"form-control\" uib-datepicker-popup=\"{{ dateOptions.format }}\" is-open=\"open\" datepicker-options=\"dateOptions\" ng-click=\"toggle()\"><i class=\"fa fa-calendar\"></i><button class=\"close\" ng-click=\"clear()\" ng-show=\"model\"><i class=\"fa fa-times-circle\"></i></button></div>");
  $templateCache.put("directives/dropdown/dropdown.html", "<div class=\"ns-dropdown\"><input type=\"text\" ng-model=\"filter_text\" placeholder=\"{{ ngModel ? text(ngModel) : \'Search...\' }}\" class=\"form-control ns-dropdown-input\" ng-class=\"{\'ns-dropdown-input-has-icon\': icon}\"><div class=\"icons\"><i class=\"fa fa-{{ icon }} ns-dropdown-input-icon\" ng-show=\"icon\"></i><i class=\"fa fa-chevron-down ns-dropdown-arrow\"></i><i class=\"fa fa-times-circle ns-dropdown-close\" ng-if=\"nullable && ngModel\" ng-click=\"clear()\"></i></div><ul class=\"ns-dropdown-list ns-dropdown-hide\"><li ng-repeat=\"item in data | filter: hideFunc | orderBy: orderFunc | filter: filter_val as filtered\" class=\"ns-dropdown-item\" ng-class=\"{focused: ngModel ? (item == ngModel) : false}\" ng-click=\"select(item)\" data-id=\"{{ item.id }}\"><span class=\"ns-dropdown-item-field text\">{{ text(item) }}</span><span class=\"ns-dropdown-item-field subtext\" ng-show=\"display.subtext\">{{ subtext(item) }}</span></li></ul></div>");
  $templateCache.put("directives/filter/filter.html", "<div class=\"filter\" ng-class=\"{ active: model.length, nomatch: model.length && !filtered.length }\"><input type=\"search\" ng-model=\"model\" class=\"form-control\" placeholder=\"filter...\"><i class=\"fa fa-search\"></i><div class=\"output\"><span ng-show=\"model.length && filtered.length\">{{ filtered.length }}</span><span ng-show=\"model.length && !filtered.length\">No matches</span></div></div>");
  $templateCache.put("directives/loader/loader.html", "<div class=\"loader\" ng-class=\"{\'loader-show\': loader}\"><div class=\"icon\"><i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i></div></div>");
  $templateCache.put("directives/navLink/navLink.html", "<a href=\"{{ url }}\" layout=\"row\" align=\"center\" justify=\"between\"><div layout=\"row\" align=\"center\"><i class=\"fa {{ \'fa-\' + icon }}\" ng-show=\"icon\"></i><span ng-show=\"!!navLink\">{{ navLink }}</span></div><span ng-if=\"loading\" class=\"count\"><i class=\"fa fa-circle-o-notch fa-spin fa-fw\"></i></span><span ng-if=\"!loading\" class=\"count\">{{ number }}</span></a>");
  $templateCache.put("directives/pageHeader/pageHeader.html", "<header class=\"page-header\" layout=\"col\" align=\"stretch\"><breadcrumbs ng-show=\"showBreadcrumbs\"></breadcrumbs><div class=\"title-holder\" layout=\"row\" align=\"center\" justify=\"between\"><div layout=\"row\" align=\"center\"><h1>{{ text }}</h1><span class=\"count\" ng-if=\"count !== undefined\">{{ count }}</span></div><ng-transclude></ng-transclude></div></header>");
  $templateCache.put("directives/pager/pager.html", "<nav class=\"pagination-container\" layout=\"row\" justify=\"center\"><ul class=\"pagination\"><li class=\"page-item\" ng-class=\"{disabled: getCurrent() == 1}\"><span class=\"page-link\" ng-click=\"setCurrent(1)\"><i class=\"fa fa-step-backward\"></i></span></li><li class=\"page-item\" ng-class=\"{disabled: getCurrent() == 1}\"><span class=\"page-link\" ng-click=\"setCurrent(getCurrent() - 1)\"><i class=\"fa fa-chevron-left\"></i></span></li><li class=\"page-item\" ng-repeat=\"page in pages\" ng-class=\"{active: getCurrent() == page}\"><span class=\"page-link\" ng-click=\"setCurrent(page)\">{{ page }}</span></li><li class=\"page-item\" ng-class=\"{disabled: getCurrent() == totalpages}\"><span class=\"page-link\" ng-click=\"setCurrent(getCurrent() + 1)\"><i class=\"fa fa-chevron-right\"></i></span></li><li class=\"page-item\" ng-class=\"{disabled: getCurrent() == totalpages}\"><span class=\"page-link\" ng-click=\"setCurrent(totalpages)\"><i class=\"fa fa-step-forward\"></i></span></li></ul><select ng-model=\"current\" ng-change=\"updateOld()\" ng-options=\"(\'goto: \' + num) for num in allpages\" class=\"form-control page-picker\"></select></nav>");
  $templateCache.put("directives/pagination/pagination.html", "<nav class=\"pagination-container\" layout=\"row\" justify=\"center\"><ul class=\"pagination\"><li class=\"page-item\" ng-class=\"{disabled: !atStart}\"><a href=\"bookings?page=1{{ query }}\" class=\"page-link\">First</a></li><li class=\"page-item\" ng-class=\"{disabled: filter.page == 1}\"><a href=\"bookings?page={{ filter.page - 1 }}{{ query }}\" class=\"page-link\">&laquo;</a></li><li class=\"page-item\" ng-repeat=\"page in pages\" ng-class=\"{active: filter.page == page}\"><a href=\"bookings?page={{ page }}{{ query }}\" class=\"page-link\">{{ page }}</a></li><li class=\"page-item\" ng-class=\"{disabled: filter.page == last}\"><a href=\"bookings?page={{ filter.page + 1 }}{{ query }}\" class=\"page-link\">&raquo;</a></li><li class=\"page-item\" ng-class=\"{disabled: filter.page == last}\"><a href=\"bookings?page={{ last }}{{ query }}\" class=\"page-link\">Last ({{ last }})</a></li></ul><select ng-model=\"current\" ng-change=\"goto()\" ng-options=\"(\'page: \' + num) for num in allpages\" class=\"form-control page-picker\"></select></nav>");
  $templateCache.put("directives/sidebar/sidebar.html", "<div class=\"sidebar\" layout=\"col sm-row\"><div class=\"site-logo\" layout=\"row\" justify=\"center\" align=\"center\"><!-- <img src=\"/images/logo2.svg\" alt=\"\" class=\"logo\" height=\"50\"> --><div class=\"logo\"><img src=\"/images/yoobee_logo_light.svg\" alt=\"\"><!-- <span class=\"caption\">Equipment Booking</span> --></div><!-- <h1>Booking System</h1> --></div><nav layout=\"col sm-row\"><!-- guest --><ul layout=\"col sm-row\" ng-if=\"!auth.isAuthenticated()\"><li class=\"title\"></li><li nav-link=\"Login\" url=\"/login\"></li><li nav-link=\"Reset My Password\" url=\"/reset-password\"></li><!-- <li nav-link=\"Register\" url=\"/register\"></li> --></ul><!-- student --><ul layout=\"col sm-row\" ng-if=\"auth.isAuthenticated() && user.admin == 0\"><li class=\"title\">Bookings</li><li nav-link=\"My Bookings\" url=\"/\"></li><li nav-link=\"Make a Booking\" url=\"/book\"></li><li class=\"title\">Settings</li><li nav-link=\"My Profile\" url=\"home/edit-profile\"></li><li nav-link=\"Logout ({{ user.name }})\" url=\"/logout\"></li></ul><!-- staff --><ul layout=\"col sm-row\" ng-if=\"auth.isAuthenticated() && user.admin == 1\"><li class=\"title\">Bookings</li><li nav-link=\"My Bookings\" url=\"/\"></li><li nav-link=\"Make a Booking\" url=\"/book\"></li><li nav-link=\"All Bookings\" url=\"/bookings\"></li><li class=\"title\">Manage</li><li nav-link=\"Users\" url=\"/manage/user\" number=\"{{ store.users.length }}\"></li><li class=\"title\">Settings</li><li nav-link=\"My Profile\" url=\"home/edit-profile\"></li><li nav-link=\"Logout ({{ user.name }})\" url=\"/logout\"></li></ul><!-- manager --><ul layout=\"col sm-row\" ng-if=\"auth.isAuthenticated() && user.admin == 2\"><li class=\"title\">Bookings</li><li nav-link=\"My Bookings\" url=\"/\"></li><li nav-link=\"Make a Booking\" url=\"/book\"></li><li nav-link=\"All Bookings\" url=\"/bookings\" number=\"{{ bookings_count }}\" loading=\"loading_bookings\"></li><li class=\"title\">Manage</li><li nav-link=\"Manage\" url=\"/manage\" show-only-sm></li><li nav-link=\"Users\" url=\"/manage/user\" number=\"{{ store.users.length }}\" loading=\"!store.users.$resolved\" class=\"sm-hide\"></li><li nav-link=\"Class Types\" url=\"/manage/class-type\" number=\"{{ store.group_types.length }}\" loading=\"!store.group_types.$resolved\" class=\"sm-hide\"></li><li nav-link=\"Classes\" url=\"/manage/class\" number=\"{{ store.groups.length }}\" loading=\"!store.groups.$resolved\" class=\"sm-hide\"></li><li nav-link=\"Product Types\" url=\"/manage/product-type\" number=\"{{ store.product_types.length }}\" loading=\"!store.product_types.$resolved\" class=\"sm-hide\"></li><li nav-link=\"Products\" url=\"/manage/product\" number=\"{{ store.products.length }}\" loading=\"!store.products.$resolved\" class=\"sm-hide\"></li><li nav-link=\"Units\" url=\"/manage/unit\" number=\"{{ store.units.length }}\" loading=\"!store.units.$resolved\" class=\"sm-hide\"></li><li class=\"title\">Settings</li><li nav-link=\"My Profile\" url=\"home/edit-profile\"></li><li nav-link=\"Site Settings\" url=\"site-settings\"></li><li nav-link=\"Logout ({{ user.name }})\" url=\"/logout\"></li></ul></nav></div>");
  $templateCache.put("pages/booking/confirm/confirm.html", "<page-header text=\"Confirm booking\"></page-header><div class=\"page-content\" ng-show=\"user.can_book\"><p>Does this look right?</p><p>If not, you can <a href=\"/book\">go back</a> and modify it first.</p><alert type=\"danger\" icon=\"exclamation-triangle\" ng-show=\"!overallAllowed\" text=\"Some of your chosen items are unavailable during your chosen time period\"></alert><table class=\"table data-table\"><tr><td class=\"row-property\">User</td><td class=\"row-value\">{{ booking._user.name }}</td></tr><tr><td class=\"row-property\">Pick Up</td><td class=\"row-value\"><span ng-show=\"booking.pickup_at\">{{ booking.pickup_at | date }}</span><alert type=\"danger\" text=\"You don\'t have a pickup date\" icon=\"exclamation-circle\" ng-show=\"!booking.pickup_at\"></alert></td></tr><tr><td class=\"row-property\">Due</td><td class=\"row-value\"><span ng-show=\"booking.due_at\">{{ booking.due_at | date }}</span><alert type=\"danger\" text=\"You don\'t have a return date\" icon=\"exclamation-circle\" ng-show=\"!booking.due_at\"></alert></td></tr><tr><td class=\"row-property\">Items</td><td class=\"row-value\"><ul ng-show=\"booking.products.length\"><li ng-repeat=\"item in booking.products\" ng-class=\"{\'not-allowed\': !allowed(item.id)}\"><i class=\"fa fa-exclamation-triangle\" ng-show=\"!allowed(item.id)\"></i>&nbsp;{{ product(item.id).name }}<b ng-hide=\"product(item.id).limitless\"> x{{ item.quantity }}</b></li></ul><alert type=\"danger\" text=\"You aren\'t booking any products\" icon=\"exclamation-circle\" ng-show=\"!booking.products.length\"></alert></td></tr><tr><td class=\"row-property\">Terms</td><td class=\"row-value\"><div class=\"settings-terms\" ng-bind-html=\"terms.val\"></div><label class=\"settings-terms-check\"><input type=\"checkbox\" ng-model=\"readTerms\">I have read and agree to the <strong>terms and conditions</strong> above.</label></td></tr></table><btn type=\"success\" icon=\"check\" ng-click=\"confirm()\" disable=\"disableSubmit()\">Make Booking</btn></div><div class=\"page-content\" ng-show=\"!user.can_book\"><alert type=\"danger\" icon=\"exclamation-triangle\" text=\"You are not allowed to make bookings\"></alert><p>Reason: <strong>{{ user.can_book_reason }}</strong></p><p>Please talk to your tutor to resolve this issue.</p></div>");
  $templateCache.put("pages/booking/edit/edit.html", "<page-header text=\"Edit Booking\"><btn icon=\"floppy-o\" ng-click=\"save()\">Save changes</btn></page-header><div class=\"page-dates\"><div layout=\"row sm-col\" class=\"space-row\"><div ratio=\"1\"><label for=\"pickup_at\">Pickup date</label><input type=\"text\" id=\"pickup_at\" ng-model=\"booking.pickup_at\" ng-change=\"createBooking()\" class=\"form-control form-control-sm\" uib-datepicker-popup=\"{{ dateOptions.format }}\" is-open=\"openPickupDate\" datepicker-options=\"dateOptions\" ng-click=\"openPickup()\"></div><div ratio=\"1\"><label for=\"due_at\">Return date</label><input type=\"text\" id=\"due_at\" ng-model=\"booking.due_at\" ng-change=\"createBooking()\" class=\"form-control form-control-sm\" uib-datepicker-popup=\"{{ dateOptions.format }}\" is-open=\"openDueDate\" datepicker-options=\"dateOptions\" ng-click=\"openDue()\"></div></div></div><filter model=\"filter\" filtered=\"filtered\"></filter><div class=\"page-content\"><table class=\"table table-hover booking-table table-filtered\" ng-show=\"filtered.length\"><thead><tr><th class=\"booking-heading-product\">Product</th><th class=\"booking-heading-type sm-hide\">Type</th><th class=\"booking-heading-quantity\">Available</th><th class=\"booking-heading-quantity\">Quantity</th></tr></thead><tr ng-repeat=\"product in products | filter: filter as filtered\"><td>{{ product.name }}</td><td class=\"sm-hide\">{{ product.type.name }}</td><td>{{ max(product) }}</td><td><input type=\"number\" ng-model=\"product._quantity\" class=\"form-control booking-quantity-input form-control-sm\" max=\"{{ max(product) }}\" ng-keyup=\"checkAgainstMax(product)\" min=\"0\" ng-change=\"createBooking()\"></td></tr></table></div>");
  $templateCache.put("pages/booking/issue/issue.html", "<page-header text=\"Issue equipment\"><btn icon=\"check\" ng-click=\"issue()\">Done</btn></page-header><div class=\"page-dates\"><div layout=\"row sm-col\" class=\"space-row\"><div ratio=\"1\"><label for=\"pickup_at\">Pickup date</label><div class=\"input-group\"><span class=\"input-group-addon\" id=\"basic-addon1\"><i class=\"fa fa-calendar\"></i></span><input type=\"date\" ng-model=\"booking.pickup_at\" class=\"form-control\" placeholder=\"yyyy-mm-dd\"></div></div><div ratio=\"1\"><label for=\"due_at\">Return date</label><div class=\"input-group\"><span class=\"input-group-addon\" id=\"basic-addon1\"><i class=\"fa fa-calendar\"></i></span><input type=\"date\" ng-model=\"booking.due_at\" class=\"form-control\" placeholder=\"yyyy-mm-dd\"></div></div></div></div><div class=\"page-content\"><div class=\"alert alert-danger\" ng-show=\"errors.length\"><p ng-repeat=\"error in errors\">Error: <b>{{ error.message }}</b></p></div><table class=\"table table-hover booking-table table-filtered\" ng-show=\"filtered.length\"><thead><tr><th class=\"booking-heading-product\">Product</th><th class=\"table-col-select-medium\">Unit</th></tr></thead><tr ng-repeat=\"product in products | filter: filter as filtered track by $index\"><td>{{ product.name }}</td><td><div ng-show=\"!product.limitless\"><dropdown ng-model=\"product._unit\" data=\"allUnits[$index]\" display=\"{text: \'unit_number\'}\" order-by=\"unit_number\"></dropdown></div><div ng-show=\"product.limitless\"><input type=\"checkbox\" ng-model=\"product._taken\"></div></td></tr></table></div>");
  $templateCache.put("pages/booking/make/make.html", "<page-header text=\"Book equipment\" breadcrumbs=\"false\"><div class=\"btn-group\" ng-show=\"user.can_book\"><button class=\"btn btn-primary btn-icon btn-sm\" ng-click=\"book()\"><i class=\"fa fa-book\"></i>Make Booking</button><button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu dropdown-menu-right\"><span class=\"dropdown-item btn-icon\" ng-click=\"reset()\"><i class=\"fa fa-undo\"></i>Reset</span></div></div></page-header><div class=\"page-content\" ng-show=\"user.can_book\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Name</div><div class=\"td row-value\"><div ng-show=\"user.admin\"><dropdown ng-model=\"booking._user\" data=\"users\" display=\"{text: \'name\', subtext: user_group}\"></dropdown></div><span ng-show=\"!user.admin\">{{ user.name }}</span></div></div><div class=\"tr\"><div class=\"td row-property center\">Pick Up</div><div class=\"td row-value\"><div class=\"input-group\"><span class=\"input-group-addon\" id=\"basic-addon1\"><i class=\"fa fa-calendar\"></i></span><input type=\"date\" ng-model=\"booking.pickup_at\" class=\"form-control\" placeholder=\"yyyy-mm-dd\"></div></div></div><div class=\"tr\"><div class=\"td row-property center\">Due At</div><div class=\"td row-value\"><div class=\"input-group\"><span class=\"input-group-addon\" id=\"basic-addon1\"><i class=\"fa fa-calendar\"></i></span><input type=\"date\" ng-model=\"booking.due_at\" class=\"form-control\" placeholder=\"yyyy-mm-dd\"></div></div></div><div class=\"tr\"><div class=\"td row-property\">Items</div><div class=\"td row-value\"><ul class=\"no-bullets\"><li layout=\"row\" class=\"spaced-row pad-down\" ng-repeat=\"product in selectedProducts\"><dropdown ng-model=\"selectedProducts[$index].product\" data=\"products\" hide=\"filterAdded\" display=\"{text: \'name\', subtext: product_type}\"></dropdown><input type=\"number\" class=\"form-control form-control-short\" min=\"1\" max=\"{{ max(product.product) }}\" step=\"1\" ng-model=\"product.quantity\" ng-show=\"!product.product.limitless\" /><span class=\"product-quantity-na\" ng-show=\"product.product.limitless\">N/A</span><btn type=\"danger\" icon=\"times\" ng-click=\"removeProduct(product, $index)\" class=\"nudge-down\"></btn></li></ul><btn type=\"info\" icon=\"plus\" ng-click=\"addProduct()\">Add Item</btn></div></div></div></div><div class=\"page-content\" ng-show=\"!user.can_book\"><alert type=\"danger\" icon=\"exclamation-triangle\" text=\"You are not allowed to make bookings\"></alert><p>Reason: <strong>{{ user.can_book_reason }}</strong></p><p>Please talk to your tutor to resolve this issue.</p></div>");
  $templateCache.put("pages/booking/manage/manage.html", "<page-header text=\"All Bookings\"><btn type=\"primary\" ng-click=\"advFilter.toggleOpen()\" icon=\"filter\">{{ advFilter.open ? \'Close\' : \'Open\' }} Filter</btn></page-header><div class=\"page-content\"><div class=\"page-advanced-filter\" ng-class=\"{\'filter-open\': advFilter.open}\" ng-show=\"advFilter.open\"><div class=\"filter-drawer\" layout=\"col\"><div layout=\"row\" justify=\"between\" class=\"pad-down filter-header\"><h2>Filter</h2><div layout=\"row\" class=\"button-row\"><btn type=\"danger\" icon=\"undo\" ng-click=\"advFilter.clear()\">Reset</btn><btn type=\"success\" icon=\"check\" ng-click=\"advFilter.apply()\" ng-show=\"advFilter.open\">Apply Filter</btn></div></div><div layout=\"row\"><div layout=\"col\" ratio=\"1\" class=\"filter-col\"><h3>Types</h3><label class=\"item checkbox-item\"><input type=\"checkbox\" ng-model=\"advFilter.props.booked\"> Show booked</label><label class=\"item checkbox-item\"><input type=\"checkbox\" ng-model=\"advFilter.props.issued\"> Show issued</label><label class=\"item checkbox-item\"><input type=\"checkbox\" ng-model=\"advFilter.props.overdue\"> Show overdue</label><label class=\"item checkbox-item\"><input type=\"checkbox\" ng-model=\"advFilter.props.closed\"> Show closed</label></div><div layout=\"col\" justify=\"between\" ratio=\"1\" class=\"filter-col\"><h3>Date Range</h3><div class=\"item item-row\"><label>From</label><div class=\"input-group\"><span class=\"input-group-addon\"><i class=\"fa fa-calendar\"></i></span><input type=\"date\" ng-model=\"advFilter.props.after\" class=\"form-control\"></div></div><div class=\"item item-row\"><label>To</label><div class=\"input-group\"><span class=\"input-group-addon\"><i class=\"fa fa-calendar\"></i></span><input type=\"date\" ng-model=\"advFilter.props.before\" class=\"form-control\"></div></div></div><div layout=\"col\" justify=\"between\" ratio=\"1\" class=\"filter-col\"><h3>Misc</h3><div class=\"item has-select-clearer item-row\" ratio=\"1\"><label>User</label><dropdown ng-model=\"advFilter.props.user\" data=\"users\" display=\"{text: \'name\', subtext: group_code}\" nullable></dropdown></div><div class=\"item item-row\" ratio=\"1\"><label>Limit</label><div layout=\"row\"><div class=\"range\" layout=\"row\" align=\"center\"><input type=\"range\" ng-model=\"advFilter.props.limit\" step=\"15\" min=\"10\" max=\"100\" ratio=\"1\"><output>{{ advFilter.props.limit }}</output></div></div></div></div></div></div></div><div ng-show=\"bookings.length && !loading\"><a ng-repeat=\"booking in bookings | orderBy: \'-id\' | page: page : advFilter.props.limit : 30 as filtered\" href=\"booking/{{ booking.id }}\" class=\"booking filterable-row list-item\" layout=\"row sm-col\" align=\"center sm-stretch\"><div class=\"col-username filterable-cell\" ratio=\"1\"><div class=\"title\">User</div><div class=\"content\">{{ booking.user.name }}</div></div><div class=\"col-groupcode filterable-cell\" ratio=\"1\"><div class=\"title\" ng-show=\"booking.user.group\">Class</div><div class=\"content\">{{ booking.user.group.code }}</div></div><div class=\"col-status status-{{ booking._status.toLowerCase() }}\" ratio=\"1\"><div class=\"title\">Status</div><div class=\"content\">{{ booking._status }}</div></div><div class=\"col-status2\" ratio=\"1\" ng-show=\"booking._priority == 1\"><div class=\"title\">Pickup</div><div class=\"content\" ng-show=\"diff(booking.pickup_at) > 1\"><span class=\"pip pip-warning\">in {{ diff(booking.pickup_at) }} days</span></div><div class=\"content\" ng-show=\"diff(booking.pickup_at) == 1\"><span class=\"pip pip-warning\">Tomorrow</span></div><div class=\"content\" ng-show=\"diff(booking.pickup_at) == 0\"><span class=\"pip pip-success\">Today</span></div><div class=\"content\" ng-show=\"diff(booking.pickup_at) == -1\"><span class=\"pip pip-danger\">Yesterday</span></div><div class=\"content\" ng-show=\"diff(booking.pickup_at) < -1\"><span class=\"pip pip-danger\">{{ diff(booking.pickup_at) * -1 }} days ago</span></div></div><div class=\"col-status2\" ratio=\"1\" ng-show=\"booking._priority == 2\"><div class=\"title\" ng-show=\"diff(booking.due_at) > -1\">Due</div><div class=\"title\" ng-show=\"diff(booking.due_at) < 0\">Overdue</div><div class=\"content\" ng-show=\"diff(booking.due_at) > 1\"><span class=\"pip pip-warning\">in {{ diff(booking.due_at) }} days</span></div><div class=\"content\" ng-show=\"diff(booking.due_at) == 1\"><span class=\"pip pip-warning\">Tomorrow</span></div><div class=\"content\" ng-show=\"diff(booking.due_at) == 0\"><span class=\"pip pip-success\">Today</span></div><div class=\"content\" ng-show=\"diff(booking.due_at) == -1\"><span class=\"pip pip-danger\">Yesterday</span></div><div class=\"content\" ng-show=\"diff(booking.due_at) < -1\"><span class=\"pip pip-danger\">by {{ diff(booking.due_at) * -1 }} days</span></div></div><div class=\"col-status2\" ratio=\"1\" ng-show=\"booking._priority == 3\"><div class=\"title\">Closed</div><div class=\"content\" ng-show=\"diff(booking.closed_at) == 0\">Today</div><div class=\"content\" ng-show=\"diff(booking.closed_at) == -1\">Yesterday</div><div class=\"content\" ng-show=\"diff(booking.closed_at) < -1\">{{ diff(booking.closed_at) * -1 }} days ago</div></div></a></div><div ng-show=\"!bookings.length && !loading\"><alert type=\"secondary\" icon=\"exclamation-triangle\" text=\"No bookings match your filter critera\"></alert></div><pager current=\"page\" limit=\"advFilter.props.limit\" data=\"bookings\" filtered=\"filtered\" filter=\"filter\" ng-show=\"!filter && bookings.length >= 30 && !loading\"></pager><div class=\"loading\" ng-show=\"loading\" layout=\"col\" justify=\"center\" align=\"center\"><i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i></div></div>");
  $templateCache.put("pages/booking/return/return.html", "<page-header text=\"Return equipment\"><btn icon=\"check\" ng-click=\"close()\" disable=\"errors.length\">Done</btn></page-header><!-- <filter model=\"filter\" filtered=\"filtered\"></filter> --><div class=\"page-content\"><div class=\"alert alert-danger\" ng-show=\"errors.length\"><p ng-repeat=\"error in errors\">Error: <b>{{ error.message }}</b></p></div><table class=\"table table-hover booking-table table-filtered\" ng-show=\"filtered.length\"><thead><tr><th class=\"table-col-checkbox\"></th><th class=\"booking-heading-product\">Product</th><th class=\"table-col-select-medium\">Unit</th><th class=\"table-col-medium-input\">Notes</th></tr></thead><tr ng-repeat=\"product in booking.products | filter: filter as filtered  track by $index\"><td><input type=\"checkbox\" ng-model=\"product.returned\" id=\"returned-{{ $index }}\" ng-disabled=\"product.locked\"></td><td><label for=\"returned-{{ $index }}\">{{ product.name }}</label></td><td><label for=\"returned-{{ $index }}\">{{ unit(product.pivot.unit_id).unit_number }}</label><span ng-show=\"product.limitless\">N/A</span></td><td><input type=\"text\" ng-model=\"product.pivot.notes\" class=\"form-control\"></td></tr></table></div>");
  $templateCache.put("pages/booking/success/success.html", "<page-header text=\"Booking made!\"></page-header><div class=\"page-content\" ratio=\"1\"><h2>Woo!</h2><p>You just made a booking!</p></div>");
  $templateCache.put("pages/booking/view/view.html", "<page-header text=\"Booking: {{ booking.pickup_at | date }}\" breadcrumbs=\"user.admin\"><btn url=\"booking/{{ booking.id }}/return\" icon=\"arrow-left\" ng-show=\"booking._priority == 2\">Return</btn><div class=\"btn-group\" ng-show=\"booking._priority == 1 && user.admin\"><a href=\"booking/{{ booking.id }}/issue\" class=\"btn btn-primary btn-sm btn-icon\"><i class=\"fa fa-arrow-right\"></i>Issue</a><button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu dropdown-menu-right\"><a href=\"booking/{{ booking.id }}/edit\" class=\"dropdown-item btn-icon\"><i class=\"fa fa-pencil\"></i>Edit</a><span class=\"dropdown-item btn-icon\" ng-click=\"delete()\"><i class=\"fa fa-trash\"></i>Delete</span></div></div></page-header><div class=\"page-content\" ratio=\"1\"><div class=\"alert alert-danger\" ng-show=\"errors.length\"><p ng-repeat=\"error in errors\">Error: <b>{{ error.message }}</b></p></div><div ng-show=\"!errors.length\"><table class=\"table data-table\"><tr><td class=\"row-property\">User</td><td class=\"row-value\">{{ booking.user.name }}</td></tr><tr class=\"print-hide\"><td class=\"row-property\">Status</td><td class=\"row-value\">{{ booking._status }}</td></tr><tr><td class=\"row-property\">Created</td><td class=\"row-value\">{{ booking.created_at | date }}</td></tr><tr class=\"print-date-row\" ng-if=\"booking.taken_at\"><td class=\"row-property\">Issued</td><td class=\"row-value\">{{ booking.taken_at | date }}</td></tr><tr ng-show=\"booking.issued_by\"><td class=\"row-property\">Issued By</td><td class=\"row-value\">{{ booking.issued_by.name }}</td></tr><tr class=\"print-date-row\" ng-if=\"booking.closed_at\"><td class=\"row-property\">Closed</td><td class=\"row-value\">{{ booking.closed_at | date }}</td></tr><tr ng-show=\"booking.closed_by\"><td class=\"row-property\">Closed By</td><td class=\"row-value\">{{ booking.closed_by.name }}</td></tr></table><div class=\"date-row\" layout=\"row sm-col md-col\"><div class=\"pickup\" ratio=\"1\" layout=\"row md-col sm-col\"><div layout=\"row\" justify=\"center\" align=\"center\" class=\"icon\"><i class=\"fa fa-upload\"></i></div><div layout=\"col\"><div layout=\"row\"><h2>Pickup</h2><p>{{ booking.pickup_at | date }}</p></div><div layout=\"row\"><h2>Issued</h2><p ng-show=\"booking.taken_at\">{{ booking.taken_at | date }}</p><p ng-show=\"!booking.taken_at\">-</p></div></div></div><div class=\"due\" ratio=\"1\" layout=\"row md-col sm-col\"><div layout=\"row\" justify=\"center\" align=\"center\" class=\"icon\"><i class=\"fa fa-download\"></i></div><div layout=\"col\"><div layout=\"row\"><h2>Due</h2><p>{{ booking.due_at | date }}</p></div><div layout=\"row\"><h2>Returned</h2><p ng-show=\"booking.closed_at\">{{ booking.closed_at | date }}</p><p ng-show=\"!booking.closed_at\">-</p></div></div></div></div><section><table class=\"table\"><tr><th>Name</th><th>Unit</th><th class=\"col-notes\">Notes</th><th>Returned</th></tr><tr ng-repeat=\"product in booking.products\"><td>{{ product.name }}</td><td><a href=\"manage/unit/{{ product.pivot.unit_id }}\" ng-show=\"product.pivot.unit_id && user.admin\">{{ unit(product.pivot.unit_id).unit_number }}</a><span ng-show=\"product.pivot.unit_id && !user.admin\">{{ unit(product.pivot.unit_id).unit_number }}</span><span ng-show=\"product.limitless && booking._priority >= 2\">N/A</span></td><td class=\"col-notes\">{{ product.pivot.notes }}</td><td>{{ product.pivot.returned_at | date }}</td></tr></table></section></div></div>");
  $templateCache.put("pages/manage/manage/manage.html", "<page-header text=\"Manage Data\"></page-header><div class=\"page-content\"><p>Here you can manage aspects of the booking system.</p><div ng-show=\"user.admin === 2\" style=\"list-group\"><a class=\"list-group-item list-group-item-action\" layout=\"row\" justify=\"between\" href=\"manage/user\"><span><i class=\"fa fa-wrench push-right\"></i> Users</span><span class=\"label label-dark label-pill\">{{ store.users.length }}</span></a><a class=\"list-group-item list-group-item-action\" layout=\"row\" justify=\"between\" href=\"manage/class-type\"><span><i class=\"fa fa-wrench push-right\"></i> Class Types</span><span class=\"label label-dark label-pill\">{{ store.group_types.length }}</span></a><a class=\"list-group-item list-group-item-action\" layout=\"row\" justify=\"between\" href=\"manage/class\"><span><i class=\"fa fa-wrench push-right\"></i> Classes</span><span class=\"label label-dark label-pill\">{{ store.groups.length }}</span></a><a class=\"list-group-item list-group-item-action\" layout=\"row\" justify=\"between\" href=\"manage/product-type\"><span><i class=\"fa fa-wrench push-right\"></i> Product Types</span><span class=\"label label-dark label-pill\">{{ store.product_types.length }}</span></a><a class=\"list-group-item list-group-item-action\" layout=\"row\" justify=\"between\" href=\"manage/product\"><span><i class=\"fa fa-wrench push-right\"></i> Products</span><span class=\"label label-dark label-pill\">{{ store.products.length }}</span></a><a class=\"list-group-item list-group-item-action\" layout=\"row\" justify=\"between\" href=\"manage/unit\"><span><i class=\"fa fa-wrench push-right\"></i> Units</span><span class=\"label label-dark label-pill\">{{ store.units.length }}</span></a></div><div ng-show=\"user.admin === 1\" style=\"list-group\"><li class=\"list-group-item\"><a href=\"manage/user\">Manage Users</a></li></div></div>");
  $templateCache.put("pages/misc/home/home.html", "<page-header text=\"Welcome, {{ user.name }}\" breadcrumbs=\"false\"></page-header><div class=\"page-content\"><div ng-show=\"bookings.length && !loading\"><h2>My Bookings</h2><a ng-repeat=\"booking in bookings | orderBy: \'-id\' | page: page : advFilter.props.limit : 30 as filtered\" href=\"booking/{{ booking.id }}\" class=\"booking filterable-row list-item\" layout=\"row sm-col\" align=\"center sm-stretch\"><div class=\"col-status status-{{ booking._status.toLowerCase() }}\" ratio=\"1\"><div class=\"title\">Status</div><div class=\"content\">{{ booking._status }}</div></div><div class=\"col-status2\" ratio=\"1\" ng-show=\"booking._priority == 1\"><div class=\"title\">Pickup</div><div class=\"content\" ng-show=\"diff(booking.pickup_at) > 1\"><span class=\"pip pip-warning\">in {{ diff(booking.pickup_at) }} days</span></div><div class=\"content\" ng-show=\"diff(booking.pickup_at) == 1\"><span class=\"pip pip-warning\">Tomorrow</span></div><div class=\"content\" ng-show=\"diff(booking.pickup_at) == 0\"><span class=\"pip pip-success\">Today</span></div><div class=\"content\" ng-show=\"diff(booking.pickup_at) == -1\"><span class=\"pip pip-danger\">Yesterday</span></div><div class=\"content\" ng-show=\"diff(booking.pickup_at) < -1\"><span class=\"pip pip-danger\">{{ diff(booking.pickup_at) * -1 }} days ago</span></div></div><div class=\"col-status2\" ratio=\"1\" ng-show=\"booking._priority == 2\"><div class=\"title\" ng-show=\"diff(booking.due_at) > -1\">Due</div><div class=\"title\" ng-show=\"diff(booking.due_at) < 0\">Overdue</div><div class=\"content\" ng-show=\"diff(booking.due_at) > 1\"><span class=\"pip pip-warning\">in {{ diff(booking.due_at) }} days</span></div><div class=\"content\" ng-show=\"diff(booking.due_at) == 1\"><span class=\"pip pip-warning\">Tomorrow</span></div><div class=\"content\" ng-show=\"diff(booking.due_at) == 0\"><span class=\"pip pip-success\">Today</span></div><div class=\"content\" ng-show=\"diff(booking.due_at) == -1\"><span class=\"pip pip-danger\">Yesterday</span></div><div class=\"content\" ng-show=\"diff(booking.due_at) < -1\"><span class=\"pip pip-danger\">by {{ diff(booking.due_at) * -1 }} days</span></div></div><div class=\"col-status2\" ratio=\"1\" ng-show=\"booking._priority == 3\"><div class=\"title\">Closed</div><div class=\"content\" ng-show=\"diff(booking.closed_at) == 0\">Today</div><div class=\"content\" ng-show=\"diff(booking.closed_at) == -1\">Yesterday</div><div class=\"content\" ng-show=\"diff(booking.closed_at) < -1\">{{ diff(booking.closed_at) * -1 }} days ago</div></div></a></div><div ng-show=\"!bookings.length && !loading\"><alert type=\"secondary\" icon=\"exclamation-triangle\" text=\"You have no bookings\"></alert></div><pager current=\"page\" limit=\"advFilter.props.limit\" data=\"bookings\" filtered=\"filtered\" filter=\"filter\" ng-show=\"!filter && bookings.length >= 30 && !loading\"></pager><div class=\"loading\" ng-show=\"loading\" layout=\"col\" justify=\"center\" align=\"center\"><i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i></div></div>");
  $templateCache.put("pages/misc/login/login.html", "<page-header text=\"Login\" breadcrumbs=\"false\"></page-header><div class=\"page-content\"><alert type=\"danger\" icon=\"exclamation-circle\" text=\"{{ error }}\" ng-show=\"error\"></alert><form ng-submit=\"login()\"><div class=\"form-group\"><label for=\"email\">Email or Student ID Number</label><input type=\"text\" id=\"email\" ng-model=\"email\" class=\"form-control\"></div><div class=\"form-group\"><label for=\"password\">Password</label><input type=\"password\" id=\"password\" ng-model=\"password\" class=\"form-control\"></div><div class=\"form-group\" layout=\"row\" justify=\"between\" align=\"center\"><input type=\"submit\" class=\"btn btn-primary\" value=\"Login\"><a href=\"/reset_password\" class=\"push-left\">I forgot my password</a></div></form></div>");
  $templateCache.put("pages/misc/reset/reset.html", "<page-header text=\"Reset My Password\" breadcrumbs=\"false\"></page-header><div class=\"page-content\"><alert type=\"success\" icon=\"check\" ng-show=\"message\" text=\"{{ message }}\"></alert><form ng-submit=\"submit()\" ng-hide=\"message\"><div class=\"form-group\"><label for=\"email\">Account Email Address</label><input type=\"text\" id=\"email\" ng-model=\"email\" class=\"form-control\"></div><div class=\"form-group\"><input type=\"submit\" class=\"btn btn-primary\" value=\"Send me a reset link\"></div></form></div>");
  $templateCache.put("pages/misc/site-settings/site-settings.html", "<page-header text=\"Site Settings\" breadcrumbs=\"false\"><!-- <btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn> --><button class=\"btn btn-icon btn-sm\" ng-class=\"{\'btn-primary\': !saved, \'btn-success\': saved}\" ng-click=\"save()\"><i class=\"fa fa-fw fa-floppy-o\" ng-show=\"!thinking && !saved\"></i><i class=\"fa fa-fw fa-circle-o-notch fa-spin\" ng-show=\"thinking\"></i><i class=\"fa fa-fw fa-check\" ng-show=\"!thinking && saved\"></i>Save</button></page-header><div class=\"page-content\"><div ng-repeat=\"setting in settings\" class=\"form-group\"><label>{{ setting.label }}</label><textarea ng-if=\"setting.field === \'textarea\'\" ng-model=\"setting.val\" class=\"form-control\"></textarea><textarea ng-if=\"setting.field === \'wysiwyg\'\" ui-tinymce=\"tinymceOptions\" ng-model=\"setting.val\" class=\"settings-wysiwyg\"></textarea><input type=\"text\" ng-if=\"setting.field === \'text\'\" ng-model=\"setting.val\" class=\"form-control\"><input type=\"number\" ng-if=\"setting.field === \'number\'\" ng-model=\"setting.val\" class=\"form-control\"></div></div>");
  $templateCache.put("pages/manage/class-types/edit/edit.html", "<page-header text=\"{{ type.name }}\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Code</div><div class=\"td row-value\"><input type=\"text\" id=\"name\" ng-model=\"type.code\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Name</div><div class=\"td row-value\"><input type=\"text\" id=\"name\" ng-model=\"type.name\" class=\"form-control\"></div></div></div></form></div>");
  $templateCache.put("pages/manage/class-types/manage/manage.html", "<page-header text=\"All Class Types\"><btn icon=\"plus\" url=\"manage/class-type/new\">New</btn></page-header><filter model=\"filter\" filtered=\"filtered\"></filter><div class=\"page-content\"><a ng-repeat=\"type in group_types | filter: filter | page : 10 : 30 as filtered\" href=\"manage/class-type/{{ type.id }}\" class=\"list-item\"><div class=\"col\" ratio=\"1\"><div class=\"title\">Name</div><div class=\"content\">{{ type.name }}</div></div><div class=\"col\" ratio=\"1\"><div class=\"title\">Code</div><div class=\"content\">{{ type.code }}</div></div><div class=\"col\" ratio=\"1\"><div class=\"title\">No. of Classes</div><div class=\"content\">{{ type.groups.length }}</div></div></a><pager current=\"page\" limit=\"10\" data=\"group_types\" filtered=\"filtered\" filter=\"filter\" ng-show=\"!filter && group_types.length >= 30\"></pager></div>");
  $templateCache.put("pages/manage/class-types/new/new.html", "<page-header text=\"New Class Type\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Code</div><div class=\"td row-value\"><input type=\"text\" id=\"name\" ng-model=\"code\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Name</div><div class=\"td row-value\"><input type=\"text\" id=\"name\" ng-model=\"name\" class=\"form-control\"></div></div></div></form></div>");
  $templateCache.put("pages/manage/class-types/view/view.html", "<page-header text=\"{{ type.code }} // {{ type.name }}\"><div class=\"btn-group\"><a href=\"manage/class-type/{{ type.id }}/edit\" class=\"btn btn-primary btn-sm btn-icon\"><i class=\"fa fa-pencil\"></i>Edit</a><button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu dropdown-menu-right\"><span class=\"dropdown-item btn-icon\" ng-click=\"delete()\"><i class=\"fa fa-trash\"></i>Delete</span></div></div></page-header><div class=\"page-content\"><table class=\"table data-table\"><tr><td class=\"row-property\">Code</td><td class=\"row-value\">{{ type.code }}</td></tr><tr><td class=\"row-property\">Name</td><td class=\"row-value\">{{ type.name }}</td></tr><tr><td class=\"row-property\">Classes ({{ type.groups.length }})<br><a href=\"manage/class/new?type={{ type.code }}\" class=\"btn push-down btn-primary btn-sm\"><i class=\"fa fa-plus\"></i></a></td><td class=\"row-value\"><ul ng-show=\"type.groups.length\"><li ng-repeat=\"group in type.groups\"><a href=\"manage/class/{{ group.id }}\">{{ group.code }}</a></li></ul><alert type=\"info\" text=\"No classes with this type\" icon=\"exclamation-circle\" ng-if=\"!type.groups.length\"><btn url=\"manage/class/new?type={{ type.code }}\" small icon=\"plus\">Create one</btn></alert></td></tr></table></div>");
  $templateCache.put("pages/manage/classes/allowed_products/allowed_products.html", "<page-header text=\"{{ group.code }}\"><div><btn type=\"info\" icon=\"floppy-o\" ng-show=\"saved === undefined\">Autosave on</btn><btn type=\"info\" icon=\"cog\" ng-show=\"!saved && saved !== undefined\" spinning>Saving</btn><btn type=\"success\" icon=\"check\" ng-show=\"saved\">Saved</btn></div></page-header><filter model=\"filter\" filtered=\"filtered\"></filter><div class=\"page-content\"><table class=\"table table-hover table-striped middle-table\" ng-hide=\"!filtered.length\"><thead><tr><th class=\"table-col-checkbox\"></th><th class=\"table-col-code\">Name</th><th class=\"table-col-code\">Type</th><th class=\"table-col-code\">Units</th><th class=\"table-col-short-input\">Quantity</th><th class=\"table-col-short-input\">Days</th></tr></thead><tbody><tr ng-repeat=\"product in products | filter: filter as filtered\"><td><input type=\"checkbox\" ng-model=\"product._allowed\" ng-change=\"allow(product)\"></td><td><a href=\"manage/product/{{ product.id }}\">{{ product.name }}</a></td><td><a href=\"manage/product_type/{{ product.type.id }}\">{{ product.type.name }}</a></td><td>{{ product.units.length }}</td><td><input type=\"number\" ng-model=\"product._quantity\" ng-change=\"update(product)\" max=\"{{ product.units.length }}\" min=\"1\" class=\"form-control form-control-sm\"></td><td><input type=\"number\" ng-model=\"product._days_allowed\" ng-change=\"update(product)\" min=\"1\" class=\"form-control form-control-sm\"></td></tr></tbody></table></div>");
  $templateCache.put("pages/manage/classes/edit/edit.html", "<page-header text=\"{{ group.code }}\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Code</div><div class=\"td row-value\"><input type=\"text\" id=\"code\" ng-model=\"group.code\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Type</div><div class=\"td row-value\"><dropdown ng-model=\"group.type\" data=\"types\" display=\"{text: \'name\', subtext: \'code\'}\" nullable></dropdown></div></div><div class=\"tr\"><div class=\"td row-property\">Tutors</div><div class=\"td row-value\"><ul class=\"no-bullets\"><li layout=\"row\" class=\"spaced-row pad-down\" ng-repeat=\"tutor in tutors\"><dropdown ng-model=\"tutors[$index]\" data=\"staff\" display=\"{text: \'name\'}\" nullable></dropdown><btn type=\"danger\" icon=\"times\" ng-click=\"removeTutor($index)\"></btn></li></ul><btn type=\"info\" icon=\"plus\" ng-click=\"addTutor()\">Add Tutor</btn></div></div></div></form><!-- <form ng-submit=\"save()\"><div class=\"form-group\"><label for=\"code\">Code</label><input type=\"text\" id=\"code\" ng-model=\"group.code\" class=\"form-control\"></div><div class=\"form-group\"><label for=\"type\">Type</label><dropdown ng-model=\"group.type\" data=\"types\" display=\"{text: \'name\', subtext: \'code\'}\" nullable></dropdown></div><section><div class=\"form-group\"><label>Tutors</label><ul class=\"no-bullets\"><li layout=\"row\" class=\"spaced-row pad-down\" ng-repeat=\"tutor in tutors\"><dropdown ng-model=\"tutors[$index]\" data=\"staff\" display=\"{text: \'name\'}\" nullable></dropdown><btn type=\"danger\" icon=\"times\" ng-click=\"removeTutor($index)\"></btn></li></ul><btn type=\"info\" icon=\"plus\" ng-click=\"addTutor()\">Add Tutor</btn></div></section></form> --></div>");
  $templateCache.put("pages/manage/classes/manage/manage.html", "<page-header text=\"All Classes\"><btn icon=\"plus\" url=\"manage/class/new\">New</btn></page-header><filter model=\"filter\" filtered=\"filtered\"></filter><div class=\"page-content\"><a ng-repeat=\"group in groups | filter: filter | page : 10 : 30 as filtered\" href=\"manage/class/{{ group.id }}\" class=\"list-item\"><div class=\"col\" ratio=\"1\"><div class=\"title\">Code</div><div class=\"content\">{{ group.code }}</div></div><div class=\"col\" ratio=\"1\"><div class=\"title\">Type</div><div class=\"content\">{{ group.type.name }}</div></div></a><pager current=\"page\" limit=\"10\" data=\"groups\" filtered=\"filtered\" filter=\"filter\" ng-show=\"!filter && groups.length >= 30\"></pager></div>");
  $templateCache.put("pages/manage/classes/new/new.html", "<page-header text=\"New Class\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Code</div><div class=\"td row-value\"><input type=\"text\" id=\"code\" ng-model=\"code\" class=\"form-control\" placeholder=\"eg. 16ADWE02B\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Type</div><div class=\"td row-value\"><dropdown ng-model=\"type\" data=\"types\" display=\"{text: \'name\', subtext: \'code\'}\" nullable></dropdown></div></div><div class=\"tr\"><div class=\"td row-property\">Tutors</div><div class=\"td row-value\"><ul class=\"no-bullets\"><li layout=\"row\" class=\"spaced-row pad-down\" ng-repeat=\"tutor in tutors track by $index\"><dropdown ng-model=\"tutors[$index]\" data=\"staff\" display=\"{text: \'name\'}\" nullable></dropdown><btn type=\"danger\" icon=\"times\" ng-click=\"removeTutor($index)\"></btn></li></ul><btn type=\"info\" icon=\"plus\" ng-click=\"addTutor()\">Add Tutor</btn></div></div></div></form><!-- <form ng-submit=\"save()\"><div class=\"form-group\"><label for=\"code\">Code</label><input type=\"text\" id=\"code\" ng-model=\"code\" class=\"form-control\" placeholder=\"eg. 16ADWE02B\"></div><div class=\"form-group\"><label for=\"type\">Type</label><dropdown ng-model=\"type\" data=\"types\" display=\"{text: \'name\', subtext: \'code\'}\" nullable></dropdown></div><section><div class=\"form-group\"><label>Tutors</label><ul class=\"no-bullets\"><li layout=\"row\" class=\"spaced-row pad-down\" ng-repeat=\"tutor in tutors track by $index\"><dropdown ng-model=\"tutors[$index]\" data=\"staff\" display=\"{text: \'name\'}\" nullable></dropdown><btn type=\"danger\" icon=\"times\" ng-click=\"removeTutor($index)\"></btn></li></ul><btn type=\"info\" icon=\"plus\" ng-click=\"addTutor()\">Add Tutor</btn></div></section></form> --></div>");
  $templateCache.put("pages/manage/classes/view/view.html", "<page-header text=\"{{ group.code }}\"><div class=\"btn-group\"><a href=\"manage/class/{{ group.id }}/edit\" class=\"btn btn-primary btn-sm btn-icon\"><i class=\"fa fa-pencil\"></i>Edit</a><button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu dropdown-menu-right\"><a href=\"manage/class/{{ group.id }}/allowed_products\" class=\"dropdown-item btn-icon\"><i class=\"fa fa-camera\"></i>Allowed Products</a><span class=\"dropdown-item btn-icon\" ng-click=\"delete()\"><i class=\"fa fa-trash\"></i>Delete</span></div></div></page-header><div class=\"page-content\"><table class=\"table data-table\"><tr><td class=\"row-property\">Code</td><td class=\"row-value\">{{ group.code }}</td></tr><tr><td class=\"row-property\">Type</td><td class=\"row-value\"><a href=\"manage/class-type/{{ group.type.id }}\">{{ group.type.name }}</a></td></tr><tr><td class=\"row-property\">Tutor<span ng-show=\"group.tutors.length > 1\">s</span></td><td class=\"row-value\"><ul ng-show=\"group.tutors.length > 1\"><li ng-repeat=\"user in group.tutors\"><a href=\"manage/user/{{ user.id }}\">{{ user.name }}</a></li></ul><a href=\"manage/user/{{ group.tutors[0].id }}\" ng-show=\"group.tutors.length == 1\">{{ group.tutors[0].name }}</a></td></tr><tr><td class=\"row-property\">Students ({{ group.users.length }})<br><a href=\"manage/user/new?class={{ group.code }}\" class=\"btn push-down btn-primary btn-sm\"><i class=\"fa fa-plus\"></i></a></td><td class=\"row-value\"><ul><li ng-repeat=\"user in group.users\"><a href=\"manage/user/{{ user.id }}\">{{ user.name }}</a></li></ul><alert type=\"info\" text=\"No students in this class\" icon=\"exclamation-circle\" ng-if=\"!group.users.length\"><btn url=\"manage/user/new?class={{ group.code }}\" small icon=\"plus\">Create one</btn></alert></td></tr><tr><td class=\"row-property\">Allowed Prods ({{ group.allowed_products.length }})<br><a href=\"manage/class/{{ group.id }}/allowed_products\" class=\"btn push-down btn-primary btn-sm\"><i class=\"fa fa-plus\"></i></a></td><td class=\"row-value\"><div ng-show=\"group.allowed_products.length\" layout=\"row\" align=\"start\" justify=\"between\"><ul><li ng-repeat=\"product in group.allowed_products\"><a href=\"manage/product/{{ product.id }}\">{{ product.name }}</a></li></ul></div><alert type=\"info\" text=\"This class is not allowed to book anything\" icon=\"exclamation-circle\" ng-if=\"!group.allowed_products.length\"></alert></td></tr></table></div>");
  $templateCache.put("pages/manage/product-types/edit/edit.html", "<page-header text=\"{{ type.name }}\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Name</div><div class=\"td row-value\"><input type=\"text\" id=\"name\" ng-model=\"type.name\" class=\"form-control\"></div></div></div></form></div>");
  $templateCache.put("pages/manage/product-types/manage/manage.html", "<page-header text=\"All Product Types\"><btn icon=\"plus\" url=\"manage/product-type/new\">New</btn></page-header><filter model=\"filter\" filtered=\"filtered\"></filter><div class=\"page-content\"><a ng-repeat=\"type in product_types | filter: filter | page : page : 10 : 30 as filtered\" href=\"manage/product-type/{{ type.id }}\" class=\"list-item\"><div class=\"col\" ratio=\"1\"><div class=\"title\">Name</div><div class=\"content\">{{ type.name }}</div></div><div class=\"col\" ratio=\"1\"><div class=\"title\">No. of Products</div><div class=\"content\">{{ type.products.length }}</div></div></a><pager current=\"page\" limit=\"10\" data=\"product_types\" filtered=\"filtered\" filter=\"filter\" ng-show=\"!filter && product_types.length >= 30\"></pager></div>");
  $templateCache.put("pages/manage/product-types/new/new.html", "<page-header text=\"New Product Type\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Name</div><div class=\"td row-value\"><input type=\"text\" id=\"name\" ng-model=\"name\" class=\"form-control\"></div></div></div></form></div>");
  $templateCache.put("pages/manage/product-types/view/view.html", "<page-header text=\"{{ type.name }}\"><div class=\"btn-group\"><a href=\"manage/product-type/{{ type.id }}/edit\" class=\"btn btn-primary btn-sm btn-icon\"><i class=\"fa fa-pencil\"></i>Edit</a><button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu dropdown-menu-right\"><span class=\"dropdown-item btn-icon\" ng-click=\"delete()\"><i class=\"fa fa-trash\"></i>Delete</span></div></div></page-header><div class=\"page-content\"><table class=\"table data-table\"><tr><td class=\"row-property\">Name</td><td class=\"row-value\">{{ type.name }}</td></tr><tr><td class=\"row-property\">Products ({{ type.products.length }})<br><a href=\"manage/product/new?type={{ type.name }}\" class=\"btn push-down btn-primary btn-sm\"><i class=\"fa fa-plus\"></i></a></td><td class=\"row-value\"><ul><li ng-repeat=\"product in type.products\"><a href=\"manage/product/{{ product.id }}\">{{ product.name }}</a></li></ul><alert type=\"info\" text=\"No products with this type\" icon=\"exclamation-circle\" ng-if=\"!type.products.length\"><btn url=\"manage/product/new?type={{ type.name }}\" small icon=\"plus\">Create one</btn></alert></td></tr></table></div>");
  $templateCache.put("pages/manage/products/edit/edit.html", "<page-header text=\"{{ product.name }}\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Name</div><div class=\"td row-value\"><input type=\"text\" id=\"name\" ng-model=\"product.name\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Type</div><div class=\"td row-value\"><dropdown ng-model=\"type\" data=\"types\" display=\"{text: \'name\'}\" nullable></dropdown></div></div><div class=\"tr\"><div class=\"td row-property center\">Limitless</div><div class=\"td row-value\"><label><input type=\"checkbox\" ng-model=\"product.limitless\" ng-true-value=\"1\" ng-false-value=\"0\" class=\"push-left push-right\"> {{ product.limitless ? \'Yes\' : \'No\' }}</label></div></div></div></form></div>");
  $templateCache.put("pages/manage/products/manage/manage.html", "<page-header text=\"All Products\"><btn icon=\"plus\" url=\"manage/product/new\">New</btn></page-header><filter model=\"filter\" filtered=\"filtered\"></filter><div class=\"page-content\"><a ng-repeat=\"product in products | filter: filter | page : page : 10 : 30 as filtered\" href=\"manage/product/{{ product.id }}\" class=\"list-item\"><div class=\"col\" ratio=\"1\"><div class=\"title\">Name</div><div class=\"content\">{{ product.name }}</div></div><div class=\"col\" ratio=\"1\"><div class=\"title\">Type</div><div class=\"content\">{{ product.type.name }}</div></div></a><pager current=\"page\" limit=\"10\" data=\"products\" filtered=\"filtered\" filter=\"filter\" ng-show=\"!filter && products.length >= 30\"></pager></div>");
  $templateCache.put("pages/manage/products/new/new.html", "<page-header text=\"New Product\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Name</div><div class=\"td row-value\"><input type=\"text\" id=\"name\" ng-model=\"name\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Type</div><div class=\"td row-value\"><dropdown ng-model=\"type\" data=\"types\" display=\"{text: \'name\'}\" nullable></dropdown></div></div><div class=\"tr\"><div class=\"td row-property center\">Limitless</div><div class=\"td row-value\"><label><input type=\"checkbox\" ng-model=\"limitless\" ng-true-value=\"1\" ng-false-value=\"0\" class=\"push-left push-right\"> {{ limitless ? \'Yes\' : \'No\' }}</label></div></div></div></form></div>");
  $templateCache.put("pages/manage/products/view/view.html", "<page-header text=\"{{ product.name }}\"><div class=\"btn-group\"><a href=\"manage/product/{{ product.id }}/edit\" class=\"btn btn-primary btn-sm btn-icon\"><i class=\"fa fa-pencil\"></i>Edit</a><button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu dropdown-menu-right\"><span class=\"dropdown-item btn-icon\" ng-click=\"delete()\"><i class=\"fa fa-trash\"></i>Delete</span></div></div></page-header><div class=\"page-content\"><table class=\"table data-table\"><tr><td class=\"row-property\">Name</td><td class=\"row-value\">{{ product.name }}</td></tr><tr><td class=\"row-property\">Type</td><td class=\"row-value\"><a href=\"manage/product-type/{{ product.type.id }}\">{{ product.type.name }}</a></td></tr><tr><td class=\"row-property\">Limitless</td><td class=\"row-value\">{{ product.limitless ? \'Yes\' : \'No\' }}</td></tr><tr><td class=\"row-property\">Units ({{ product.units.length }})<br><a href=\"manage/unit/new?product={{ product.id }}\" class=\"btn push-down btn-primary btn-sm\"><i class=\"fa fa-plus\"></i></a></td><td class=\"row-value\"><ul><li ng-repeat=\"unit in product.units | orderBy: orderByUnit track by $index\"><a href=\"manage/unit/{{ unit.id }}\">{{ unit.unit_number }}</a></li></ul><alert type=\"info\" text=\"No units for this product\" icon=\"exclamation-circle\" ng-if=\"!product.units.length\"><btn url=\"manage/unit/new?product={{ product.id }}\" small icon=\"plus\">Create one</btn></alert></td></tr><tr><td class=\"row-property\">Classes ({{ product.groups_allowed.length }})</td><td class=\"row-value\"><div layout=\"row\" align=\"start\" justify=\"between\" ng-show=\"product.groups_allowed.length\"><ul><li ng-repeat=\"group in product.groups_allowed\"><a href=\"manage/class/{{ group.id }}\">{{ group.code }}</a></li></ul></div><alert type=\"info\" text=\"No classes are allowed to book this product. Edit a class to allow this product.\" icon=\"exclamation-circle\" ng-if=\"!product.groups_allowed.length\"></alert></td></tr></table></div>");
  $templateCache.put("pages/manage/units/edit/edit.html", "<page-header text=\"{{ unit.product.name }}: {{ unit.unit_number }}\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Unit No</div><div class=\"td row-value\"><input type=\"text\" id=\"unit_number\" ng-model=\"unit.unit_number\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Serial No</div><div class=\"td row-value\"><input type=\"text\" id=\"serial_number\" ng-model=\"unit.serial_number\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Asset No</div><div class=\"td row-value\"><input type=\"text\" id=\"asset_number\" ng-model=\"unit.asset_number\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Product</div><div class=\"td row-value\"><dropdown ng-model=\"product\" data=\"products\" display=\"{text: \'name\', subtext: product_type}\" nullable></dropdown></div></div><div class=\"tr\"><div class=\"td row-property\">Notes</div><div class=\"td row-value\"><textarea id=\"notes\" ng-model=\"unit.notes\" class=\"form-control\"></textarea></div></div></div></form></div>");
  $templateCache.put("pages/manage/units/export/export.html", "<page-header text=\"Export Units\"></page-header><div class=\"page-content\"><textarea ng-model=\"csv\" readonly cols=\"30\" rows=\"20\" class=\"form-control\"></textarea></div>");
  $templateCache.put("pages/manage/units/import/import.html", "<page-header text=\"Import Units\"><btn type=\"primary\" icon=\"cloud-upload\" ng-click=\"import()\" disable=\"!checkedUnits().length\">Import</btn></page-header><div class=\"page-content\"><div class=\"importer\" layout=\"col\"><div layout=\"row\" align=\"center\"><input type=\"file\" class=\"form-control\" fileread=\"file\" loader=\"loader\" ratio=\"1\"><button class=\"btn btn-info\" ng-click=\"reload()\"><i class=\"fa fa-refresh fa-fw\" ng-class=\"{\'fa-spin\': reloading}\"></i></button></div><div ng-show=\"errors.length\"><h2>{{ errors.length }} Issues</h2><p ng-repeat=\"error in errors\" ratio=\"1\" layout=\"row\" justify=\"between\" align=\"center\"><span>{{ error.message }}</span><a class=\"btn btn-primary btn-sm btn-icon\" href=\"/manage/product/new?name={{ encode(error.product_name) }}\" target=\"_blank\"><i class=\"fa fa-plus\"></i>Create {{ error.product_name }}</a></p></div><div ng-show=\"skips.length\"><hr>{{ skips.length }} duplicate item{{ skips.length > 1 ? \'s\' : \'\' }} will be skipped</div></div><div ng-show=\"units.length\"><!-- <alert type=\"success\" icon=\"check\" text=\"Found {{ units.length }} Users\"></alert> --><filter model=\"filter\" filtered=\"filtered\"></filter><table class=\"table\"><tr><th></th><th>Product</th><th>Unit No</th><th>Serial No</th><th>Asset No</th></tr><tr ng-repeat=\"unit in units | filter: filter as filtered\" class=\"importer-row\" box-checker=\"unit._add\" ng-class=\"{\'no-import\': !unit._add}\"><td><input type=\"checkbox\" ng-model=\"unit._add\" class=\"no-click\"></td><td><span ng-show=\"unit._product\">{{ unit._product.name }}</span><span ng-show=\"unit._noproduct\" class=\"pip pip-danger\">{{ unit._noproduct }}</span></td><td>{{ unit.unit_number }}</td><td>{{ unit.serial_number }}</td><td>{{ unit.asset_number }}</td></tr></table></div></div>");
  $templateCache.put("pages/manage/units/manage/manage.html", "<page-header text=\"All Units\"><div class=\"btn-group\"><a href=\"manage/unit/new\" class=\"btn btn-primary btn-icon btn-sm\"><i class=\"fa fa-plus\"></i>New</a><button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu dropdown-menu-right\"><a class=\"dropdown-item btn-icon\" href=\"manage/unit/import\"><i class=\"fa fa-cloud-upload\"></i>Import Units</a><a class=\"dropdown-item btn-icon\" href=\"manage/unit/export\"><i class=\"fa fa-cloud-download\"></i>Export Units</a></div></div></page-header><filter model=\"filter\" filtered=\"filtered\"></filter><div class=\"page-content\"><a ng-repeat=\"unit in units | filter: filter | orderBy: [product_id, unit_number] | page: page : 10 : 30 as filtered\" href=\"manage/unit/{{ unit.id }}\" class=\"list-item\"><div class=\"col\" ratio=\"1\"><div class=\"title\">Product</div><div class=\"content\">{{ unit.product.name }}</div></div><div class=\"col\" ratio=\"1\"><div class=\"title\">Unit No.</div><div class=\"content\">{{ unit.unit_number }}</div></div><div class=\"col\" ratio=\"1\"><div class=\"title\">Serial No.</div><div class=\"content\">{{ unit.serial_number }}</div></div><div class=\"col\" ratio=\"1\"><div class=\"title\">Asset No.</div><div class=\"content\">{{ unit.asset_number }}</div></div></a><!-- <table class=\"table table-hover table-filtered\" ng-hide=\"!filtered.length\"><thead><tr><th class=\"table-col-name\" width=\"10%\">Unit No</th><th class=\"table-col-code\" width=\"10%\">Serial No</th><th class=\"table-col-name\" width=\"10%\">Asset No</th><th class=\"table-col-name\">Product</th></tr></thead><tbody><tr ng-repeat=\"unit in units | filter: filter | page: page : 10 : 30 as filtered\"><td><a href=\"manage/unit/{{ unit.id }}\">{{ unit.unit_number }}</a></td><td>{{ unit.serial_number }}</td><td>{{ unit.asset_number }}</td><td><a href=\"manage/product/{{ unit.product.id }}\">{{ unit.product.name }}</a></td></tr></tbody></table> --><pager current=\"page\" limit=\"10\" data=\"units\" filtered=\"filtered\" filter=\"filter\" ng-show=\"!filter && units.length >= 30\"></pager></div>");
  $templateCache.put("pages/manage/units/new/new.html", "<page-header text=\"New Unit\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Unit No</div><div class=\"td row-value\"><input type=\"text\" id=\"unit_number\" ng-model=\"unit_number\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Serial No</div><div class=\"td row-value\"><input type=\"text\" id=\"serial_number\" ng-model=\"serial_number\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Asset No</div><div class=\"td row-value\"><input type=\"text\" id=\"asset_number\" ng-model=\"asset_number\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Product</div><div class=\"td row-value\"><dropdown ng-model=\"product\" data=\"products\" display=\"{text: \'name\', subtext: product_type}\" nullable></dropdown></div></div><div class=\"tr\"><div class=\"td row-property\">Notes</div><div class=\"td row-value\"><textarea id=\"notes\" ng-model=\"notes\" class=\"form-control\"></textarea></div></div></div></form></div>");
  $templateCache.put("pages/manage/units/view/view.html", "<page-header text=\"{{ unit.product.name }}: {{ unit.unit_number }}\"><div class=\"btn-group\"><a href=\"manage/unit/{{ unit.id }}/edit\" class=\"btn btn-primary btn-sm btn-icon\"><i class=\"fa fa-pencil\"></i>Edit</a><button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu dropdown-menu-right\"><span class=\"dropdown-item btn-icon\" ng-click=\"delete()\"><i class=\"fa fa-trash\"></i>Delete</span></div></div></page-header><div class=\"page-content\"><table class=\"table data-table\"><tr><td class=\"row-property\">Unit No</td><td class=\"row-value\">{{ unit.unit_number ? unit.unit_number : \'-\' }}</td></tr><tr><td class=\"row-property\">Serial No</td><td class=\"row-value\">{{ unit.serial_number ? unit.serial_number : \'-\' }}</td></tr><tr><td class=\"row-property\">Asset No</td><td class=\"row-value\">{{ unit.asset_number ? unit.asset_number : \'-\' }}</td></tr><tr><td class=\"row-property\">Product</td><td class=\"row-value\"><a href=\"manage/product/{{ unit.product.id }}\">{{ unit.product.name }}</a></td></tr><tr><td class=\"row-property\">Notes</td><td class=\"row-value\">{{ unit.notes ? unit.notes : \'-\' }}</td></tr></table></div>");
  $templateCache.put("pages/manage/users/edit_note/edit_note.html", "<page-header text=\"Edit Note\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><label for=\"note-content\">Note Content</label><input type=\"text\" id=\"note-content\" class=\"form form-control\" ng-model=\"note.content\"></form></div>");
  $templateCache.put("pages/manage/users/edit/edit.html", "<page-header text=\"{{ !profileMode ? user.name : \'Edit Profile\' }}\" breadcrumbs=\"!profileMode\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><div class=\"alert alert-danger\" ng-show=\"errors.length\"><p ng-repeat=\"error in errors\">Error: <b>{{ error.message }}</b></p></div><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Name</div><div class=\"td row-value\" ng-show=\"!profileMode || you.admin == 2\"><input type=\"text\" id=\"name\" ng-model=\"user.name\" class=\"form-control\"></div><div class=\"td row-value\" ng-show=\"profileMode\">{{ user.name }}</div></div><div class=\"tr\" ng-show=\"!profileMode\"><div class=\"td row-property center\">ID Number</div><div class=\"td row-value\" ng-show=\"!profileMode || you.admin == 2\"><input type=\"text\" id=\"id_number\" ng-model=\"user.id_number\" class=\"form-control\"></div><div class=\"td row-value\" ng-show=\"profileMode\">{{ user.id_number }}</div></div><div class=\"tr\"><div class=\"td row-property center\">Email Address</div><div class=\"td row-value\" ng-show=\"!profileMode || you.admin == 2\"><input type=\"email\" id=\"email\" ng-model=\"user.email\" class=\"form-control\"></div><div class=\"td row-value\" ng-show=\"profileMode\">{{ user.email }}</div></div><div class=\"tr\"><div class=\"td row-property center\">Phone Number</div><div class=\"td row-value\" ng-show=\"!profileMode || you.admin == 2\"><input type=\"text\" id=\"phone\" ng-model=\"user.phone\" class=\"form-control\"></div><div class=\"td row-value\" ng-show=\"profileMode\">{{ user.phone }}</div></div><div class=\"tr\"><div class=\"td row-property center\">DOB</div><div class=\"td row-value\" ng-show=\"!profileMode || you.admin == 2\"><div class=\"input-group\"><span class=\"input-group-addon\" id=\"basic-addon1\"><i class=\"fa fa-calendar\"></i></span><input type=\"date\" ng-model=\"user.dob\" class=\"form-control\" placeholder=\"yyyy-mm-dd\"></div></div><div class=\"td row-value\" ng-show=\"profileMode\">{{ user.dob | date }}</div></div><div class=\"tr\"><div class=\"td row-property center\">Password</div><div class=\"td row-value\"><input type=\"password\" id=\"password\" ng-model=\"password\" class=\"form-control\" placeholder=\"••••••••\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Password repeat</div><div class=\"td row-value\"><input type=\"password\" id=\"confirm_password\" ng-model=\"confirm_password\" class=\"form-control\" placeholder=\"••••••••\"></div></div><div class=\"tr\" ng-hide=\"profileMode || you.id == user.id || you.admin !== 2\"><div class=\"td row-property center\">Role</div><div class=\"td row-value\"><dropdown ng-model=\"role\" data=\"roles\" display=\"{text: \'text\'}\"></dropdown></div></div><div class=\"tr\" ng-show=\"role.level === 0 && !profileMode\"><div class=\"td row-property center\">Class</div><div class=\"td row-value\"><dropdown ng-model=\"group\" data=\"groups\" display=\"{text: \'code\'}\"></dropdown></div></div><div class=\"tr\" ng-show=\"role.level === 0 && !profileMode\"><div class=\"td row-property center\">Can Book</div><div class=\"td row-value\"><label><input type=\"checkbox\" ng-model=\"user.can_book\" ng-change=\"syncUser()\" ng-true-value=\"1\" class=\"push-right\"> {{ user.can_book ? \'Yes\' : \'No\' }}</label></div></div><div class=\"tr\" ng-show=\"role.level === 0 && !profileMode && !user.can_book\"><div class=\"td row-property center\">Reason</div><div class=\"td row-value\"><input type=\"text\" ng-model=\"user.can_book_reason\" class=\"form-control\" id=\"can_book_reason\"></div></div></div></form><!-- <form ng-submit=\"save()\"><div layout=\"row sm-col\" class=\"spaced-row\"><div class=\"form-group\" ratio=\"1\"><label for=\"name\">Name</label><input type=\"text\" id=\"name\" ng-model=\"user.name\" class=\"form-control\"></div><div class=\"form-group\" ratio=\"1\"><label for=\"email\">Email Address</label><input type=\"email\" id=\"email\" ng-model=\"user.email\" class=\"form-control\"></div></div><div layout=\"row sm-col\" class=\"spaced-row\"><div class=\"form-group\" ratio=\"1\"><label for=\"phone\">Phone Number</label><input type=\"text\" id=\"phone\" ng-model=\"user.phone\" class=\"form-control\"></div><div class=\"form-group\" ratio=\"1\"><label for=\"dob\">DOB</label><div class=\"input-group\"><span class=\"input-group-addon\" id=\"basic-addon1\"><i class=\"fa fa-calendar\"></i></span><input type=\"date\" ng-model=\"user.dob\" class=\"form-control\"></div></div></div><div layout=\"row sm-col\" class=\"spaced-row\"><div class=\"form-group\" ratio=\"1\"><label for=\"password\">Password</label><input type=\"password\" id=\"password\" ng-model=\"password\" class=\"form-control\" placeholder=\"••••••••\"></div><div class=\"form-group\" ratio=\"1\"><label for=\"confirm_password\">Confirm Password</label><input type=\"password\" id=\"confirm_password\" ng-model=\"confirm_password\" class=\"form-control\" placeholder=\"••••••••\"></div></div><div layout=\"row sm-col\" class=\"spaced-row\" ng-hide=\"profileMode || you.id == user.id\"><div class=\"form-group\" ratio=\"1\"><label for=\"group\">Role</label><dropdown ng-model=\"role\" data=\"roles\" display=\"{text: \'text\'}\"></dropdown></div></div><div layout=\"row sm-col\" class=\"spaced-row\" ng-show=\"role.level === 0 && !profileMode\"><div class=\"form-group\" ratio=\"1\"><label for=\"id_number\">Student ID Number</label><input type=\"text\" id=\"id_number\" ng-model=\"user.id_number\" class=\"form-control\"></div><div class=\"form-group\" ratio=\"1\"><label for=\"group\">Class</label><dropdown ng-model=\"group\" data=\"groups\" display=\"{text: \'code\'}\" nullable></dropdown></div></div><div layout=\"row sm-row\" class=\"spaced-row\" ng-show=\"role.level === 0 && !profileMode\"><div class=\"form-group\"><label for=\"can_book\">Can Book</label><div class=\"push-left\"><label><input type=\"checkbox\" ng-model=\"user.can_book\" ng-change=\"syncUser()\" ng-true-value=\"1\" class=\"push-right\"> {{ user.can_book ? \'Yes\' : \'No\' }}</label></div></div><div class=\"form-group\" ng-show=\"!user.can_book\" ratio=\"1\"><label for=\"can_book_reason\">Reason</label><input type=\"text\" ng-model=\"user.can_book_reason\" class=\"form-control\" id=\"can_book_reason\"></div></div></form> --></div>");
  $templateCache.put("pages/manage/users/export/export.html", "<page-header text=\"Export Users\"></page-header><div class=\"page-content\"><textarea ng-model=\"csv\" readonly cols=\"30\" rows=\"20\" class=\"form-control\"></textarea></div>");
  $templateCache.put("pages/manage/users/import/import.html", "<page-header text=\"Import Users\"><btn type=\"primary\" icon=\"cloud-upload\" ng-click=\"import()\" disable=\"!checkedUsers().length\">Import</btn></page-header><div class=\"page-content\"><div class=\"importer\" layout=\"col\"><div layout=\"row\" align=\"center\"><input type=\"file\" class=\"form-control\" fileread=\"file\" loader=\"loader\" ratio=\"1\"><button class=\"btn btn-info\" ng-click=\"reload()\"><i class=\"fa fa-refresh fa-fw\" ng-class=\"{\'fa-spin\': reloading}\"></i></button></div><div ng-show=\"errors.length\"><h2>{{ errors.length }} Issues</h2><p ng-repeat=\"error in errors\" ratio=\"1\" layout=\"row\" justify=\"between\" align=\"center\"><span>{{ error.message }}</span><a class=\"btn btn-primary btn-sm btn-icon\" href=\"/manage/class/new?code={{ error.group_code }}\" target=\"_blank\"><i class=\"fa fa-plus\"></i>Create {{ error.group_code }}</a></p></div></div><div ng-show=\"users.length\"><!-- <alert type=\"success\" icon=\"check\" text=\"Found {{ users.length }} Users\"></alert> --><filter model=\"filter\" filtered=\"filtered\"></filter><table class=\"table\"><tr><th></th><th>Name</th><th>Email</th><th>ID Number</th><th>Phone</th><th>DOB</th><!-- <th>Password</th> --><th>Class</th></tr><tr ng-repeat=\"user in users | filter: filter as filtered\" class=\"importer-row\" box-checker=\"user._add\" ng-class=\"{\'no-import\': !user._add}\"><td><input type=\"checkbox\" ng-model=\"user._add\" class=\"no-click\"></td><td>{{ user.name }}</td><td>{{ user.email }}</td><td>{{ user.id_number }}</td><td>{{ user.phone }}</td><td>{{ user.dob | date }}</td><!-- <td>{{ user.password }}</td> --><td><span ng-show=\"user._group\">{{ user._group.code }}</span><span ng-show=\"user._nogroup\" class=\"pip pip-danger\">{{ user._nogroup }}</span></td></tr></table></div></div>");
  $templateCache.put("pages/manage/users/manage/manage.html", "<page-header text=\"All Users\"><div class=\"btn-group\"><a href=\"manage/user/new\" class=\"btn btn-primary btn-icon btn-sm\"><i class=\"fa fa-plus\"></i>New</a><button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu dropdown-menu-right\"><a class=\"dropdown-item btn-icon\" href=\"manage/user/import\"><i class=\"fa fa-cloud-upload\"></i>Import Users</a><a class=\"dropdown-item btn-icon\" href=\"manage/user/export\"><i class=\"fa fa-cloud-download\"></i>Export Users</a></div></div></page-header><filter model=\"filter\" filtered=\"filtered\"></filter><div class=\"page-content\"><div ng-hide=\"!filtered.length\"><a class=\"list-item\" ng-repeat=\"user in users | filter: filter | orderBy: \'group.id\' | orderBy: \'-admin\' | page: page : 10 : 30 as filtered\" href=\"manage/user/{{ user.id }}\"><div class=\"col\" ratio=\"1\"><div class=\"title\">Name</div><div class=\"content\">{{ user.name }}</div></div><div class=\"col\" ratio=\"1\"><div class=\"title\">Role</div><div class=\"content\">{{ user._role }}</div></div><div class=\"col\" ratio=\"1\"><div class=\"title\" ng-show=\"user.group\">Class</div><div class=\"content\">{{ user.group.code }}</div></div></a></div><pager current=\"page\" limit=\"10\" data=\"users\" filtered=\"filtered\" filter=\"filter\" ng-show=\"!filter && users.length >= 30\"></pager></div>");
  $templateCache.put("pages/manage/users/new/new.html", "<page-header text=\"New User\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><div class=\"alert alert-danger\" ng-show=\"errors.length\"><p ng-repeat=\"error in errors\">Error: <b>{{ error.message }}</b></p></div><form ng-submit=\"save()\"><div class=\"fake-table data-table\"><div class=\"tr\"><div class=\"td row-property center\">Name</div><div class=\"td row-value\"><input type=\"text\" id=\"name\" ng-model=\"name\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">ID Number</div><div class=\"td row-value\"><input type=\"text\" id=\"id_number\" ng-model=\"id_number\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Email Address</div><div class=\"td row-value\"><input type=\"email\" id=\"email\" ng-model=\"email\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Phone Number</div><div class=\"td row-value\"><input type=\"text\" id=\"phone\" ng-model=\"phone\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">DOB</div><div class=\"td row-value\"><div class=\"input-group\"><span class=\"input-group-addon\" id=\"basic-addon1\"><i class=\"fa fa-calendar\"></i></span><input type=\"date\" ng-model=\"dob\" class=\"form-control\" placeholder=\"yyyy-mm-dd\"></div></div></div><div class=\"tr\"><div class=\"td row-property center\">Password</div><div class=\"td row-value\"><input type=\"password\" id=\"password\" ng-model=\"password\" class=\"form-control\"></div></div><div class=\"tr\"><div class=\"td row-property center\">Password repeat</div><div class=\"td row-value\"><input type=\"password\" id=\"confirm_password\" ng-model=\"confirm_password\" class=\"form-control\"></div></div><div class=\"tr\" ng-show=\"user.admin === 2\"><div class=\"td row-property center\">Role</div><div class=\"td row-value\"><dropdown ng-model=\"role\" data=\"roles\" display=\"{text: \'text\'}\"></dropdown></div></div><div class=\"tr\" ng-show=\"role.level === 0\"><div class=\"td row-property center\">Class</div><div class=\"td row-value\"><dropdown ng-model=\"group\" data=\"groups\" display=\"{text: \'code\'}\"></dropdown></div></div></div></form></div>");
  $templateCache.put("pages/manage/users/new_note/new_note.html", "<page-header text=\"New Note for {{ user.name }}\"><btn type=\"primary\" icon=\"floppy-o\" ng-click=\"save()\">Save</btn></page-header><div class=\"page-content\"><form ng-submit=\"save()\"><label for=\"note-content\">Note Content</label><input type=\"text\" id=\"note-content\" class=\"form form-control\" ng-model=\"content\"></form></div>");
  $templateCache.put("pages/manage/users/view/view.html", "<page-header text=\"{{ user.name }}\"><div class=\"btn-group\" ng-show=\"you.admin === 2 || user.admin === 0 || user.id === you.id\"><a href=\"manage/user/{{ user.id }}/edit\" class=\"btn btn-primary btn-icon btn-sm\"><i class=\"fa fa-pencil\"></i>Edit</a><button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu dropdown-menu-right\"><span class=\"dropdown-item btn-icon\" ng-click=\"delete()\"><i class=\"fa fa-trash\"></i>Delete</span></div></div></page-header><div class=\"page-content\"><table class=\"table data-table\"><tr><td class=\"row-property\">Name</td><td class=\"row-value\">{{ user.name }}</td></tr><tr><td class=\"row-property\">Phone</td><td class=\"row-value\">{{ user.phone ? user.phone : \'-\' }}</td></tr><tr><td class=\"row-property\">Email</td><td class=\"row-value\"><a href=\"mailto:{{ user.email }}\" ng-show=\"user.email\">{{ user.email }}</a><span ng-if=\"!user.email\">-</span></td></tr><tr ng-show=\"user.dob\"><td class=\"row-property\">DOB</td><td class=\"row-value\">{{ user.dob | date }} ({{ user._age }} years old)</td></tr><tr><td class=\"row-property\">Role</td><td class=\"row-value\">{{ user._role }}</td></tr><tr ng-show=\"!user.admin\"><td class=\"row-property\">Student ID</td><td class=\"row-value\">{{ user.id_number }}</td></tr><tr ng-show=\"!user.admin\" ng-class=\"{\'bg-danger\': !user.can_book}\"><td class=\"row-property\">Can book</td><td class=\"row-value\"> {{ user.can_book ? \'Yes\' : \'No\' }}<div class=\"bump-down\" ng-show=\"!user.can_book\"><p>Reason: <strong>{{ user.can_book_reason }}</strong></p></div></td></tr><tr><td class=\"row-property\">Bookings</td><td class=\"row-value\"><a href=\"bookings?user={{ user.id }}\">View all bookings by this user</a></td></tr><tr ng-show=\"!user.admin\"><td class=\"row-property\">Class</td><td class=\"row-value\"><a href=\"manage/class/{{ user.group.id }}\">{{ user.group.code }}</a></td></tr><tr ng-show=\"user.admin && user.tutors_groups.length\"><td class=\"row-property\">Tutor of</td><td class=\"row-value\"><ul><li ng-repeat=\"group in user.tutors_groups\"><a href=\"manage/class/{{ group.id }}\">{{ group.code }}</a></li></ul></td></tr><tr ng-show=\"!user.admin\"><td class=\"row-property\">Notes<br><a href=\"manage/user/{{ user.id }}/note/new\" class=\"btn push-down btn-primary btn-sm\"><i class=\"fa fa-plus\"></i></a></td><td class=\"row-value\"><div class=\"list-group\"><div class=\"list-group-item user-note\" ng-repeat=\"note in user.notes\" layout=\"row\" ng-hide=\"note.is_old\"><div class=\"user-note-content\" ratio=\"1\"><a href=\"manage/user/{{ user.id }}/note/{{ note.id }}\">{{ note.content }}</a></div><div class=\"user-note-controls\"><btn icon=\"pencil\" type=\"info\" small url=\"manage/user/{{ user.id }}/note/{{ note.id }}/edit\">Edit</btn> <btn icon=\"trash\" type=\"danger\" small ng-click=\"deleteNote(note)\"></btn></div></div></div></td></tr></table></div>");
  $templateCache.put("pages/manage/users/view_note/view_note.html", "<page-header text=\"View Note\"><div class=\"btn-group\"><a href=\"manage/user/{{ user.id }}/note/{{ note.id }}/edit\" class=\"btn btn-primary btn-sm btn-icon\"><i class=\"fa fa-pencil\"></i>Edit</a><button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu dropdown-menu-right\"><span class=\"dropdown-item btn-icon\" ng-click=\"deleteNote(note)\"><i class=\"fa fa-trash\"></i>Delete</span></div></div></page-header><div class=\"page-content\"><h2 class=\"center-text\">{{ note.content }}</h2><section><table class=\"table data-table\"><tr><td class=\"row-property\">Written by</td><td class=\"row-value\"><a href=\"manage/user/{{ note.writer.id }}\">{{ note.writer.name }}</a></td></tr><tr><td class=\"row-property\">Date</td><td class=\"row-value\">{{ dateify(note.created_at) | date: \'d/M/yy h:mm a\' }}</td></tr></table></section><div ng-show=\"note.history.length\"><h3>Note History</h3><ul class=\"list-group\"><li ng-repeat=\"version in note.history\" class=\"list-group-item\"><div layout=\"row\" justify=\"between\"><span>{{ version.content }}</span><span><a href=\"manage/user/{{ version.writer.id }}\">{{ version.writer.name }}</a> ({{ dateify(version.created_at) | date: \'d/M/yy h:mm a\' }})</span></div></li></ul></div></div>");
}]);